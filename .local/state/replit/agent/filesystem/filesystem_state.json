{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# HoopMetrics Basketball Training Application\n\n## Overview\n\nHoopMetrics is an AI-powered basketball training application designed to enhance player skills through structured workout programs, progress tracking, achievement systems, and wearable device integration. The platform combines modern web technologies with AI-driven personalization to create comprehensive basketball training experiences.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n**Technology Stack:** React with TypeScript, built using Vite for optimal development experience and performance. The frontend follows a component-driven architecture with clear separation of concerns.\n\n**Routing & Navigation:** Uses Wouter for lightweight client-side routing, providing efficient navigation between dashboard, workouts, analytics, and social features.\n\n**State Management:** TanStack React Query handles server state management, caching API responses and synchronizing data across components. Local component state is managed with React hooks.\n\n**UI Framework:** Built on shadcn/ui component library using Radix UI primitives for accessibility. Tailwind CSS provides styling with custom basketball-themed color schemes and responsive design patterns.\n\n**Design System:** Implements a cohesive design language with gradient themes (orange and blue), glass morphism effects, and basketball court visual patterns for brand consistency.\n\n### Backend Architecture\n**Framework:** Express.js server with modular route organization and centralized middleware handling. The server implements RESTful API patterns with clear endpoint structure.\n\n**Authentication:** Replit OAuth integration using OpenID Connect (OIDC) with automatic user creation and profile synchronization. Session management uses PostgreSQL-backed storage with secure cookie configuration.\n\n**Route Protection:** Middleware-based authentication ensures secure access to protected endpoints with proper error handling for unauthorized requests.\n\n**API Design:** Organized with dedicated endpoints for dashboard data, workouts, user profiles, AI-generated content, and wearable device integration.\n\n### Database Architecture\n**Primary Database:** PostgreSQL with Drizzle ORM providing type-safe database operations and schema management.\n\n**Schema Design:** Comprehensive data model supporting:\n- User profiles and authentication data\n- Workout categories, exercises, and session tracking\n- Achievement systems and progress metrics\n- Biometric data from wearable devices\n- AI workout templates and personalization data\n- Social features including leaderboards and activity feeds\n\n**Data Relationships:** Well-defined relational structure linking users to their workouts, achievements, and biometric data for comprehensive analytics.\n\n### AI Integration\n**Primary AI Service:** Anthropic's Claude (claude-sonnet-4-20250514) for workout generation and training insights.\n\n**Personalization Engine:** AI analyzes user profiles, performance history, and preferences to generate customized basketball training programs.\n\n**Features:**\n- Personalized workout creation based on skill level and goals\n- Training insights and performance analysis\n- Adaptive recommendations based on progress tracking\n- Basketball-specific exercise suggestions and coaching cues\n\n### Wearable Device Integration\n**Supported Devices:** Apple Watch (HealthKit), Garmin, and Coros fitness trackers.\n\n**Data Collection:** Real-time biometric monitoring including heart rate, HRV, calories burned, and recovery metrics.\n\n**Workout Enhancement:** Real-time heart rate zone monitoring during training sessions with AI-driven intensity adjustments.\n\n**Analytics:** Comprehensive performance tracking combining workout data with biometric insights for detailed progress analysis.\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database:** PostgreSQL hosting with serverless scaling capabilities\n- **Vercel/Replit:** Deployment platform and development environment\n\n### Authentication & User Management\n- **Replit OAuth:** Primary authentication provider using OpenID Connect\n- **connect-pg-simple:** PostgreSQL session storage for secure user sessions\n\n### AI Services\n- **Anthropic Claude API:** AI workout generation and training insights using the latest claude-sonnet-4-20250514 model\n\n### Wearable Device APIs\n- **Apple HealthKit:** iOS health data integration for Apple Watch users\n- **Garmin Connect IQ:** SDK for Garmin device data synchronization\n- **Coros API:** Integration with Coros fitness tracking devices\n\n### UI and Styling\n- **Radix UI:** Accessible component primitives for complex UI elements\n- **Tailwind CSS:** Utility-first CSS framework with custom basketball theme\n- **Lucide React:** Icon library for consistent visual elements\n\n### Development Tools\n- **TypeScript:** Type safety across the entire application stack\n- **Drizzle ORM:** Type-safe database operations and migrations\n- **TanStack React Query:** Server state management and caching\n- **Zod:** Runtime type validation for API requests and database schemas","size_bytes":5128},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        // Basketball-specific color extensions\n        orange: {\n          500: \"#FF6B35\",\n          600: \"#E55A2B\",\n        },\n        navy: {\n          800: \"#1E3A8A\",\n          900: \"#1E2B70\",\n        },\n        electric: {\n          500: \"#0EA5E9\",\n          600: \"#0284C7\",\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": { boxShadow: \"0 0 5px rgb(255 107 53 / 0.5)\" },\n          \"50%\": { boxShadow: \"0 0 20px rgb(255 107 53 / 0.8)\" },\n        },\n        \"slide-up\": {\n          \"0%\": { transform: \"translateY(10px)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        \"bounce-subtle\": {\n          \"0%, 100%\": { transform: \"translateY(0)\" },\n          \"50%\": { transform: \"translateY(-2px)\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-glow\": \"pulse-glow 2s infinite\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"bounce-subtle\": \"bounce-subtle 2s infinite\",\n        \"float\": \"float 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":5164},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/Master Sheet Development Best Practices & Tools (1 269c5371aef6807198bded4c90fd7b4a_1757431334669.md":{"content":"# Master Sheet: Development Best Practices & Tools (1)\n\n# Master Sheet: Development Best Practices & Tools\n\n*The definitive guide for modern web development - what to use, when to use it, and why*\n\n---\n\n## 🎯 Quick Reference Philosophy\n\n**The Stack Hierarchy:**\n\n1. **AI-Enhanced Development** - Use AI to accelerate every step\n2. **JavaScript-First** - Minimize context switching, maximize velocity\n3. **Component-Driven** - Build once, reuse everywhere\n4. **Performance-Optimized** - Fast by default, scalable by design\n\n---\n\n## 🚀 Core Foundation Stack\n\n### **Next.js 14+ (App Router + TypeScript)**\n\n- **What**: React meta-framework with built-in optimization\n- **When**: Every new project (unless specific constraints)\n- **Problem Solved**: Setup complexity, performance optimization, deployment\n- **Setup**: `npx create-next-app@latest my-app --typescript --tailwind --app`\n\n### **Vercel (Hosting + Edge Functions)**\n\n- **What**: Deployment platform with global edge network\n- **When**: For production deployments, edge computing needs\n- **Problem Solved**: DevOps complexity, global performance, automatic scaling\n- **Setup**: Connect GitHub repo, auto-deploys on push\n\n### **Neon + Prisma (Database + ORM)**\n\n- **What**: PostgreSQL with type-safe database access\n- **When**: Need structured data, complex queries, relationships\n- **Problem Solved**: Database setup, type safety, schema management\n- **Setup**: `npm install prisma @prisma/client` + Neon dashboard\n\n---\n\n## 🤖 AI-Enhanced Development Tools\n\n### **Claude Code + Figma MCP Server** ⭐ *NEW*\n\n- **What**: Terminal-based AI coding assistant that reads Figma designs\n- **When**: Converting designs to code, building components from mockups\n- **Problem Solved**: Manual design-to-code translation, context switching\n- **Setup**:\n    \n    ```bash\n    npm install -g @anthropic-ai/claude-code\n    claude mcp add --transport sse figma-dev-mode-mcp-server [http://127.0.0.1:3845/sse](http://127.0.0.1:3845/sse)\n    ```\n    \n- **Usage**: `\"Convert this sign-up card design to code: [figma-link]\"`\n\n### **Chat SDK by Vercel** ⭐ *NEW*\n\n- **What**: Fully customizable chatbot framework with modern features\n- **When**: Building AI chat interfaces, customer support bots\n- **Problem Solved**: Complex chat UI implementation, AI integration\n- **Features**: Artifacts, reasoning, best practices built-in\n\n### [**v0.dev](http://v0.dev) (AI Component Generation)**\n\n- **What**: Vercel's AI-powered component generator\n- **When**: Need custom components quickly, prototyping UIs\n- **Problem Solved**: Blank page syndrome, repetitive component building\n- **Usage**: Describe component → Get production-ready code\n- **Notable Collections**: ElevenLabs starters - [https://v0.app/@elevenlabs-devs](https://v0.app/@elevenlabs-devs)\n\n---\n\n## 🎨 UI Component Libraries (In Priority Order)\n\n### **1. shadcn/ui (Foundation)**\n\n- **What**: Copy-paste React components with Radix + Tailwind\n- **When**: Every project as the base component system\n- **Problem Solved**: Component library maintenance, design consistency\n- **Setup**: `npx shadcn-ui@latest init`\n- **Essential Components**: `button card input dialog table form`\n\n### **2. Shadd (Developer Experience)** ⭐ *NEW*\n\n- **What**: Global shorthand for `npx shadcn add` with package manager detection\n- **When**: Adding shadcn components in any project\n- **Problem Solved**: Remembering different package manager commands\n- **Setup**: `npm i -g shadd@latest`\n- **Usage**: `shadd button card dialog` (instead of `npx shadcn@latest add`)\n\n### **3. Animate UI** ⭐ *NEW*\n\n- **What**: Motion-animated components built with React, TypeScript, Tailwind, Framer Motion\n- **When**: Need animated components that complement shadcn/ui\n- **Problem Solved**: Building complex animations from scratch\n- **Features**: Dynamic backgrounds, animated text, motion effects\n\n### **4. Magic UI (Enhanced shadcn)**\n\n- **What**: shadcn/ui components with built-in animations and enhancements\n- **When**: Need more visual flair than basic shadcn components\n- **Problem Solved**: Adding animations and interactions to basic components\n- **Use Cases**: Landing pages, marketing sites, interactive dashboards\n\n### **5. React Bits** ⭐ *NEW*\n\n- **What**: Text animation components and effects library\n- **When**: Need specific text animations (shuffle, typewriter, etc.)\n- **Problem Solved**: Complex text animation implementations\n- **Example**: Shuffle text animation for dynamic content\n\n### **6. Tremor (Data Visualization)**\n\n- **What**: Dashboard components with built-in charts and analytics\n- **When**: Building admin dashboards, analytics pages\n- **Problem Solved**: Complex data visualization from scratch\n- **Components**: BarChart, LineChart, DonutChart, KPI cards\n\n---\n\n## ⚡ Performance & Development Tools\n\n### **React Scan** ⭐ *NEW*\n\n- **What**: Zero-config performance monitoring that highlights slow components\n- **When**: Optimizing React app performance, debugging renders\n- **Problem Solved**: Identifying performance bottlenecks without complex setup\n- **Setup**: `<script src=\"//[unpkg.com/react-scan/dist/auto.global.js\"></script>](http://unpkg.com/react-scan/dist/auto.global.js\"></script>)`\n- **Result**: Visual highlights of components that need optimization\n\n### **Skiper UI** ⭐ *NEW*\n\n- **What**: Component library/design system\n- **When**: Need additional UI components beyond shadcn\n- **Problem Solved**: Extended component needs, design system gaps\n\n### **New Design & UI Tools** ⭐ *LATEST ADDITIONS*\n\n- **TweakCN**: [https://tweakcn.com](https://tweakcn.com) - Tailwind CSS class tweaking tool\n- **PatternCraft**: [https://patterncraft.fun](https://patterncraft.fun) - Pattern and background generators\n- **Lina Adaptive Scroll Area**: [https://lina.sameer.sh](https://lina.sameer.sh) - Custom scroll components\n- **Evil Charts**: [https://evilcharts.com](https://evilcharts.com) - Unique chart and data visualization library\n- **React Wheel Picker**: [https://react-wheel-picker.chanhdai.com](https://react-wheel-picker.chanhdai.com) - iOS-style wheel picker\n- **Cook**: [https://cook.engage-dev.com](https://cook.engage-dev.com) - Component cooking and customization\n- **Shadcn TipTap**: [https://tiptap.niazmorshed.dev](https://tiptap.niazmorshed.dev) - Rich text editor with shadcn styling\n- **Shadcn Prose**: [https://shadcn-prose.vercel.app](https://shadcn-prose.vercel.app) - Beautiful prose and content styling\n\n---\n\n## 📚 Essential Library Stack\n\n### **🎨 UI & Styling**\n\n```bash\n# Headless UI primitives\nnpm install @radix-ui/react-*\n\n# Type-safe validation  \nnpm install zod\n\n# Conditional styling utilities\nnpm install clsx tailwind-merge\n\n# Beautiful icons\nnpm install lucide-react\n\n# Smooth animations\nnpm install framer-motion\n\n# Spaceman RTA - React Theme Animation\nnpm install @space-man/react-theme-animation\n# Demo: [https://spaceman-rta-vite.netlify.app](https://spaceman-rta-vite.netlify.app)\n```\n\n### **📝 Forms & Validation**\n\n```bash\n# Form management\nnpm install react-hook-form\n\n# Form validation integration\nnpm install @hookform/resolvers\n```\n\n### **🗃️ State & Data Management**\n\n```bash\n# Lightweight state management\nnpm install zustand\n\n# Backend as a service\nnpm install @supabase/supabase-js\n\n# Type-safe database ORM\nnpm install prisma @prisma/client\n\n# Data visualization\nnpm install recharts\n```\n\n### **🎭 User Experience**\n\n```bash\n# Toast notifications\nnpm install sonner\n\n# Mobile-friendly drawers\nnpm install vaul\n\n# Touch-friendly carousels\nnpm install embla-carousel\n\n# Dark mode support\nnpm install next-themes\n\n# Date manipulation\nnpm install date-fns\n```\n\n### **📊 Analytics & Monitoring**\n\n```bash\n# User insights\nnpm install @vercel/analytics\n\n# Booking integration\nnpm install @calcom/embed-react\n```\n\n### **📱 Mobile Development (React Native)**\n\n```bash\n# React Native development platform\nnpm install expo\n\n# Navigation\nnpm install @react-navigation/native\n\n# Performance animations\nnpm install react-native-reanimated\n\n# Native bottom sheets\nnpm install @gorhom/bottom-sheet\n\n# Lottie animations\nnpm install @lottiefiles/dotlottie-react\n\n# Performance optimized lists\nnpm install @shopify/flash-list\n# See comparison: [https://snack.expo.dev/@naqvitalha/flashlist-vs-legendlist-vs-flatlist](https://snack.expo.dev/@naqvitalha/flashlist-vs-legendlist-vs-flatlist)\n```\n\n### **🎬 React Native Performance Tools**\n\n- **FlashList vs FlatList**: Optimized list component with better performance\n- **Expo Development**: Modern React Native development platform\n- **ConvExpo**: [https://github.com/0rtbo/convexpo](https://github.com/0rtbo/convexpo) - Expo + Convex integration\n\n---\n\n## 🛠️ Development Workflow Best Practices\n\n### **Project Structure (Recommended)**\n\n```\nmy-app/\n├── app/                    # Next.js 14 App Router\n│   ├── (dashboard)/       # Route groups\n│   ├── (auth)/           # Authentication routes\n│   ├── api/              # API routes\n│   │   ├── chat/         # AI chat endpoints\n│   │   └── scrape/       # Data collection\n│   └── globals.css\n├── components/            # React components\n│   ├── ui/               # shadcn base components\n│   ├── animated/         # Animate UI components\n│   ├── layout/           # Layout components\n│   └── features/         # Feature-specific components\n├── lib/                  # Utilities & services\n│   ├── services/         # Business logic\n│   ├── utils.ts          # Helper functions\n│   └── prisma.ts         # Database client\n├── prisma/\n│   └── schema.prisma     # Database schema\n└── scripts/              # Automation scripts\n```\n\n### **Essential package.json Scripts**\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"prisma generate && next build\",\n    \"lint\": \"next lint\",\n    \"db:push\": \"prisma db push\",\n    \"db:studio\": \"prisma studio\",\n    \"ui:add\": \"shadd\",\n    \"ui:generate\": \"npx v0@latest\",\n    \"perf:scan\": \"echo 'React Scan active in dev mode'\"\n  }\n}\n```\n\n### **Component Selection Decision Tree**\n\n1. **Basic Component Needed?** → Start with shadcn/ui (`shadd button`)\n2. **Need Animation?** → Check Animate UI → Fallback to Magic UI\n3. **Text Animation Specific?** → React Bits\n4. **Data Visualization?** → Tremor\n5. **Custom/Complex?** → [v0.dev](http://v0.dev) generation → Manual development\n\n---\n\n## 🚦 When to Use What\n\n### **🎯 Choose shadcn/ui when:**\n\n- Building forms, layouts, basic interactions\n- Need consistent, accessible components\n- Want copy-paste customization\n\n### **🎯 Choose Animate UI when:**\n\n- Building landing pages or marketing sites\n- Need impressive visual effects\n- Want motion design without complexity\n\n### **🎯 Choose Magic UI when:**\n\n- shadcn/ui is too plain\n- Need subtle animations and enhancements\n- Building interactive dashboards\n\n### **🎯 Choose React Bits when:**\n\n- Need specific text animations\n- Building dynamic content displays\n- Want typewriter, shuffle, or text morphing effects\n\n### **🎯 Choose Tremor when:**\n\n- Building admin dashboards\n- Need data visualization\n- Want charts and analytics components\n\n### **🎯 Choose [v0.dev](http://v0.dev) when:**\n\n- Need custom components quickly\n- Have specific design requirements\n- Want AI assistance in component creation\n\n---\n\n## 🏆 Performance Optimization Checklist\n\n### **Development Phase**\n\n- [ ]  Use React Scan to identify performance issues\n- [ ]  Implement proper loading states with Suspense\n- [ ]  Use proper key props for lists\n- [ ]  Lazy load heavy components\n\n### **Production Phase**\n\n- [ ]  Enable Vercel Analytics\n- [ ]  Configure proper caching headers\n- [ ]  Optimize images with Next.js Image component\n- [ ]  Use Vercel Edge Functions for global performance\n\n---\n\n## 🔥 Rapid Development Workflow (60-minute app)\n\n### **Minutes 1-15: Foundation**\n\n```bash\nnpx create-next-app@latest my-app --typescript --tailwind --app\ncd my-app\nnpm install prisma @prisma/client\nnpx shadcn-ui@latest init\nnpm install -g shadd\n```\n\n### **Minutes 16-30: Core Components**\n\n```bash\nshadd button card input dialog table\n# Add React Scan script to layout\n# Set up basic database schema\n```\n\n### **Minutes 31-45: Features & AI**\n\n```bash\nnpm install ai @ai-sdk/anthropic\n# Implement chat interface with Chat SDK patterns\n# Add data fetching and display\n```\n\n### **Minutes 46-60: Polish & Deploy**\n\n```bash\n# Add animations with Animate UI\n# Performance check with React Scan\n# Deploy to Vercel\n```\n\n---\n\n## 🎯 Key Takeaways\n\n1. **Start with shadcn/ui + shadd** for foundation\n2. **Add React Scan immediately** for performance monitoring\n3. **Use AI tools (Claude Code, [v0.dev](http://v0.dev))** to accelerate development\n4. **Layer animations progressively** (Animate UI → Magic UI → Custom)\n5. **Optimize continuously** with built-in tools\n6. **Stay in the JavaScript ecosystem** to minimize context switching\n\nThis master sheet represents the accumulated wisdom of modern web development - use it as your north star for building fast, beautiful, and maintainable applications.\n\n---\n\n## 🎆 Latest Additions & Experimental Tools\n\n### **🎮 3D & Interactive Libraries**\n\n- **WiFi 3D Fusion**: [https://github.com/MaliosDark/wifi-3d-fusion](https://github.com/MaliosDark/wifi-3d-fusion) - Cool 3D visualization library\n- **Alternative 3D Library**: Advanced 3D components and interactions\n    - Repo: [https://github.com/username/3d-library-repo](https://github.com/username/3d-library-repo) (linked from Twitter)\n- **ZCF Framework**: [https://github.com/UfoMiao/zcf](https://github.com/UfoMiao/zcf) - Experimental framework/tools\n\n### **🤖 AI & Automation Integration**\n\n- **N8N Mega Prompt for AI Agents**:\n\n```\n<role>\nYou are a senior automation architect and expert in building complex AI-powered agents inside n8n. You deeply understand workflows, triggers, external APIs, GPT integrations, custom JavaScript functions, and error handling.\n</role>\n\n<task>\nGuide me step-by-step to build an AI-powered agent in n8n. The agent's purpose is: {$AGENT_PURPOSE}\n</task>\n\n<requirements>\n1. Start by helping me scope the agent's goals and required inputs/outputs.\n2. Design the high-level architecture of the agent workflow.\n3. Recommend the necessary n8n nodes (built-in, HTTP, function, OpenAI, etc).\n4. For each node, explain its configuration and purpose.\n5. Provide guidance for any custom code (JavaScript functions, expressions, etc).\n6. Help me set up retry logic, error handling, and fallback steps.\n7. Show me how to store and reuse data across executions (e.g. with Memory, Databases, or Google Sheets).\n8. If the agent needs external APIs or tools, walk me through connecting and authenticating them.\n</requirements>\n\n<output_style>\nBe extremely clear and hands-on, like you're mentoring a junior automation engineer. Provide visual explanations where possible (e.g. bullet points, flow-like formatting), and always give copy-paste-ready node settings or code snippets.\n</output_style>\n\n<expandability>\nEnd by suggesting ways to make the agent more powerful, like chaining workflows, adding webhooks, or connecting to vector databases, CRMs, or Slack.\n</expandability>\n```\n\n### **📊 Current Tech Stack (From Recent Projects)**\n\n```tsx\n// Recommended modern stack combination\nTech Stack:\n- NextJS (App Router + TypeScript default)\n- Zustand (State Management)\n- TanStack Query (Data Fetching)\n- Shadcn UI (Base Components)\n- Lemon Squeeze (Utility Library)\n- TypeScript (Default Language)\n\n// Marketing & Content Tools:\n- UGC Video Creation for TikTok + Meta ads\n- Viral format research and implementation\n- First post achieving 8k+ views milestone\n```\n\n### **🕰️ Performance & Development Enhancements**\n\n- **Spaceman RTA**: React Theme Animation with Vite integration\n    - Package: `@space-man/react-theme-animation`\n    - Demo: [https://spaceman-rta-vite.netlify.app](https://spaceman-rta-vite.netlify.app)\n    - NPM: [https://npmjs.com/package/@space-man/react-theme-animation](https://npmjs.com/package/@space-man/react-theme-animation)\n\n---\n\n## 🔄 Update Log\n\n**Latest Update**: September 9, 2025\n\n- Added React Native performance comparison tools\n- Integrated new design system resources\n- Added 3D visualization libraries\n- Updated AI automation prompts\n- Added current tech stack recommendations\n- Included experimental framework discoveries","size_bytes":16454},"attached_assets/The Complete Kingmaker Implementation Guide 269c5371aef6813d95b8f681679c4c7e_1757431334671.md":{"content":"# The Complete Kingmaker Implementation Guide\n\n# The Complete Kingmaker Implementation Guide: Detailed Resources & Tools\n\nThis comprehensive resource guide provides everything needed to build the complete Kingmaker Software Blueprint. Each phase includes specific tools, libraries, and step-by-step implementation guides for maximum execution speed and empire-building success. 🚀\n\n## 📋 **MASTER RESOURCE CHECKLIST**\n\n### **Essential Development Tools:**\n\n- **Design**: Figma, Adobe Creative Suite, [Coolors.co](http://Coolors.co)\n- **Frontend**: React, TypeScript, Tailwind, shadcn/ui, Framer Motion\n- **Backend**: Node.js, Express, Prisma, Claude AI SDK\n- **Database**: PostgreSQL, Redis, InfluxDB\n- **Blockchain**: Hardhat, OpenZeppelin, Chainlink\n- **DevOps**: Docker, Kubernetes, Terraform, GitHub Actions\n- **Monitoring**: Grafana, Prometheus, Sentry\n- **Testing**: Jest, Cypress, Storybook\n\n### **Third-Party Services:**\n\n- **AI**: Anthropic Claude, OpenAI (embeddings)\n- **Payments**: Stripe, Circle, MoonPay\n- **Compliance**: Jumio, Chainalysis\n- **Analytics**: Mixpanel, Amplitude\n- **Communication**: Twilio, SendGrid\n- **Infrastructure**: AWS/GCP, Vercel, PlanetScale\n\n## **Development Environment Setup:**\n\n### **Project Structure:**\n\n```\ncourtmetrics-empire/\n├── apps/\n│   ├── main-app/          # Core CourtMetrics app\n│   ├── financial-service/ # Independent financial microservice\n│   └── integration-bridge/# API gateway and event handling\n├── packages/\n│   ├── shared-types/      # TypeScript definitions\n│   ├── ui-components/     # Shared component library\n│   └── blockchain/        # Smart contracts and oracle code\n├── infrastructure/\n│   ├── terraform/         # Infrastructure as code\n│   ├── k8s/              # Kubernetes manifests\n│   └── monitoring/        # Grafana dashboards and alerts\n└── docs/\n    ├── api/              # API documentation\n    ├── architecture/     # System design docs\n    └── deployment/       # Deployment guides\n```\n\n### **Environment Variables Template:**\n\n```bash\n# Core App\nNEXT_PUBLIC_APP_URL=[https://app.courtmetrics.com](https://app.courtmetrics.com)\nDATABASE_URL=postgresql://user:pass@host:5432/courtmetrics\nREDIS_URL=redis://[localhost:6379](http://localhost:6379)\n\n# AI Services\nANTHROPIC_API_KEY=sk-ant-...\nOPENAI_API_KEY=sk-...\n\n# Financial Service\nCIRCLE_API_KEY=...\nSTRIPE_SECRET_KEY=sk_live_...\nCHAINLINK_NODE_URL=...\n\n# Blockchain\nETHEREUM_RPC_URL=...\nPOLYGON_RPC_URL=...\nCONTRACT_PRIVATE_KEY=...\n\n# External APIs\nAPPLE_HEALTH_CLIENT_ID=...\nGARMIN_API_KEY=...\nCOROS_API_SECRET=...\n\n# Monitoring\nSENTRY_DSN=...\nGRAFANA_API_KEY=...\n```\n\n### **Development Workflow:**\n\n1. **Local Development**: Docker Compose for all services\n2. **Testing**: Automated test suites with GitHub Actions\n3. **Staging**: Kubernetes cluster with production-like data\n4. **Production**: Multi-region deployment with disaster recovery\n5. **Monitoring**: Real-time dashboards and alerting\n\n---\n\n# 🎯 **PHASE 1: CORE FOUNDATION (Weeks 1-4)**\n\n## **📱 STEP 1A: GAMIFIED FITNESS TRACKING CORE**\n\n### **Frontend Stack:**\n\n**Core Technologies:**\n\n```bash\nnpx create-next-app@latest courtmetrics --typescript --tailwind --eslint\ncd courtmetrics\n\n# UI Framework & Components\nnpm install @radix-ui/react-avatar @radix-ui/react-dialog @radix-ui/react-dropdown-menu\nnpm install @radix-ui/react-progress @radix-ui/react-tabs @radix-ui/react-toast\nnpm install lucide-react # Icon library\nnpm install shadcn-ui # Component library\n\n# Animation & Interactions\nnpm install framer-motion # Smooth animations\nnpm install react-spring # Physics-based animations\nnpm install lottie-react # Lottie animations for celebrations\n\n# Charts & Data Visualization\nnpm install recharts # Fitness progress charts\nnpm install d3 # Custom visualizations\nnpm install react-chartjs-2 chart.js # Alternative charting\n```\n\n**Gamification Engine:**\n\n```tsx\n// gamification-engine.ts\nexport class GamificationEngine {\n  private streakMultiplier = {\n    1: 1.0,\n    7: 1.2,\n    14: 1.5,\n    30: 2.0,\n    90: 3.0\n  };\n\n  calculatePoints(workout: WorkoutData, userStreak: number): number {\n    const basePoints = this.getBasePoints(workout);\n    const difficultyBonus = this.getDifficultyBonus(workout.intensity);\n    const streakMultiplier = this.getStreakMultiplier(userStreak);\n    const consistencyBonus = this.getConsistencyBonus(workout.timestamp);\n    \n    return Math.floor(\n      (basePoints + difficultyBonus) * streakMultiplier * consistencyBonus\n    );\n  }\n\n  triggerCelebration(achievement: Achievement): CelebrationConfig {\n    return {\n      type: achievement.tier,\n      duration: achievement.tier === 'legendary' ? 3000 : 1500,\n      effects: this.getCelebrationEffects(achievement),\n      sound: this.getCelebrationSound(achievement)\n    };\n  }\n\n  generateDynamicChallenge(userHistory: WorkoutData[]): Challenge {\n    const userPattern = this.analyzeWorkoutPattern(userHistory);\n    const suggestedImprovement = this.calculateOptimalProgression(userPattern);\n    \n    return {\n      id: generateId(),\n      type: 'dynamic',\n      target: [suggestedImprovement.target](http://suggestedImprovement.target),\n      timeframe: suggestedImprovement.timeframe,\n      reward: this.calculateRewardTier(suggestedImprovement.difficulty),\n      personalizedMessage: this.generateMotivationalMessage(userPattern)\n    };\n  }\n}\n```\n\n**Real-time Progress Tracking:**\n\n```tsx\n// progress-tracker.ts\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface ProgressTrackerProps {\n  currentValue: number;\n  targetValue: number;\n  metric: string;\n  celebration?: boolean;\n}\n\nexport const ProgressTracker: React.FC<ProgressTrackerProps> = ({\n  currentValue,\n  targetValue,\n  metric,\n  celebration\n}) => {\n  const progressPercentage = (currentValue / targetValue) * 100;\n  const isComplete = currentValue >= targetValue;\n\n  return (\n    <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 p-4\">\n      <motion.div\n        className=\"absolute inset-0 bg-white/10\"\n        initial={{ x: '-100%' }}\n        animate={{ x: isComplete ? '0%' : `-${100 - progressPercentage}%` }}\n        transition={{ duration: 0.8, ease: 'easeOut' }}\n      />\n      \n      <div className=\"relative z-10\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-white font-semibold\">{metric}</span>\n          <span className=\"text-white/90\">{currentValue}/{targetValue}</span>\n        </div>\n        \n        <AnimatePresence>\n          {celebration && (\n            <motion.div\n              initial={{ scale: 0, rotate: -180 }}\n              animate={{ scale: 1, rotate: 0 }}\n              exit={{ scale: 0, rotate: 180 }}\n              className=\"absolute -top-2 -right-2 text-yellow-400\"\n            >\n              🏆\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n```\n\n### **Step-by-Step Implementation:**\n\n1. **Core Mechanics** (Day 1-3):\n    - Build streak tracking system\n    - Implement variable reward schedules\n    - Create quality scoring algorithm\n2. **Visual Feedback** (Day 4-5):\n    - Animation library for celebrations\n    - Progress bars and achievement unlocks\n    - Card sorting with physics interactions\n3. **Social Features** (Day 6-7):\n    - Friend leaderboards\n    - Achievement sharing\n    - Competitive challenges\n\n---\n\n## **🤖 STEP 1B: CLAUDE AI PERSONAL TRAINER INTEGRATION**\n\n### **AI Integration Stack:**\n\n```bash\n# Anthropic Claude SDK\nnpm install @anthropic-ai/sdk\n\n# Vector Database & Embeddings\nnpm install @pinecone-database/pinecone # Vector storage\nnpm install openai # For embeddings\nnpm install @langchain/community # LangChain integration\nnpm install @langchain/anthropic # Claude-specific tools\n```\n\n**Personal Trainer AI Service:**\n\n```tsx\n// ai-trainer-service.ts\nimport Anthropic from '@anthropic-ai/sdk';\n\nexport class AITrainerService {\n  private anthropic: Anthropic;\n  private userContext: Map<string, UserContext> = new Map();\n\n  constructor() {\n    this.anthropic = new Anthropic({\n      apiKey: process.env.ANTHROPIC_API_KEY,\n    });\n  }\n\n  async generateWorkoutPlan(\n    userProfile: UserProfile,\n    preferences: WorkoutPreferences,\n    constraints: PhysicalConstraints\n  ): Promise<WorkoutPlan> {\n    const context = this.buildUserContext(userProfile, preferences, constraints);\n    \n    const response = await this.anthropic.messages.create({\n      model: 'claude-3-sonnet-20240229',\n      max_tokens: 2000,\n      messages: [{\n        role: 'user',\n        content: `\n          As an expert personal trainer, create a customized workout plan for:\n          \n          User Profile: ${JSON.stringify(context, null, 2)}\n          \n          Requirements:\n          - Personalized to user's fitness level and goals\n          - Include specific exercises, sets, reps, and rest periods\n          - Provide progression strategies\n          - Consider equipment availability and constraints\n          - Include motivational coaching notes\n          \n          Format as structured JSON with clear instructions.\n        `\n      }],\n    });\n\n    return this.parseWorkoutResponse(response.content[0].text);\n  }\n\n  async provideLiveCoaching(\n    currentWorkout: WorkoutSession,\n    realTimeData: SensorData\n  ): Promise<CoachingMessage> {\n    const analysis = this.analyzePerformance(currentWorkout, realTimeData);\n    \n    const response = await this.anthropic.messages.create({\n      model: 'claude-3-haiku-20240307', // Faster model for real-time\n      max_tokens: 500,\n      messages: [{\n        role: 'user',\n        content: `\n          Provide real-time coaching feedback:\n          \n          Current Performance: ${JSON.stringify(analysis)}\n          User State: ${this.getUserState(currentWorkout.userId)}\n          \n          Provide encouraging, specific feedback in 1-2 sentences.\n          Focus on form, motivation, or tactical adjustments.\n        `\n      }],\n    });\n\n    return {\n      message: response.content[0].text,\n      urgency: this.calculateMessageUrgency(analysis),\n      timestamp: new Date()\n    };\n  }\n\n  async analyzeProgressTrends(\n    userId: string,\n    timeframe: string\n  ): Promise<ProgressInsights> {\n    const historicalData = await this.getUserWorkoutHistory(userId, timeframe);\n    const vectorizedData = await this.vectorizeWorkoutData(historicalData);\n    \n    const response = await this.anthropic.messages.create({\n      model: 'claude-3-sonnet-20240229',\n      max_tokens: 1500,\n      messages: [{\n        role: 'user',\n        content: `\n          Analyze fitness progress and provide insights:\n          \n          Historical Data: ${JSON.stringify(historicalData.summary)}\n          Key Metrics: ${JSON.stringify(vectorizedData.metrics)}\n          \n          Provide:\n          - Progress assessment (strengths and areas for improvement)\n          - Trend analysis (what's working, what needs adjustment)\n          - Specific recommendations for next phase\n          - Motivation strategy based on personality profile\n        `\n      }],\n    });\n\n    return this.parseInsightsResponse(response.content[0].text);\n  }\n}\n```\n\n**Smart Workout Recommendations:**\n\n```tsx\n// recommendation-engine.ts\nexport class SmartRecommendationEngine {\n  async generateDynamicWorkout(\n    userHistory: WorkoutData[],\n    currentGoals: FitnessGoals,\n    availableTime: number,\n    equipment: Equipment[]\n  ): Promise<DynamicWorkout> {\n    \n    // Analyze user patterns\n    const patterns = this.analyzeWorkoutPatterns(userHistory);\n    const progressionNeeds = this.calculateProgressionRequirements(patterns);\n    \n    // Build context-aware prompt\n    const workoutContext = {\n      userLevel: this.calculateFitnessLevel(userHistory),\n      preferredExercises: patterns.favoriteExercises,\n      weakPoints: progressionNeeds.improvementAreas,\n      timeConstraint: availableTime,\n      availableEquipment: equipment,\n      recoveryStatus: this.assessRecoveryStatus(userHistory)\n    };\n    \n    return await this.aiTrainer.generateContextualWorkout(workoutContext);\n  }\n\n  async optimizeWorkoutTiming(\n    userId: string,\n    proposedSchedule: WorkoutSchedule\n  ): Promise<OptimizedSchedule> {\n    const userBiorhythm = await this.analyzeBiorhythm(userId);\n    const historicalPerformance = await this.getPerformanceByTimeOfDay(userId);\n    \n    return this.aiTrainer.optimizeScheduling({\n      biorhythm: userBiorhythm,\n      performance: historicalPerformance,\n      proposed: proposedSchedule\n    });\n  }\n}\n```\n\n### **Step-by-Step Implementation:**\n\n1. **AI Integration** (Week 1):\n    - Set up Anthropic API connection\n    - Build user context management system\n    - Create workout generation prompts\n    - Implement caching for performance\n2. **Real-time Coaching** (Week 2):\n    - Build live feedback system\n    - Implement WebSocket connections\n    - Create coaching message queue\n    - Add sentiment analysis for motivation\n3. **Progress Analysis** (Week 3):\n    - Build historical data analysis\n    - Implement trend detection algorithms\n    - Create insight generation system\n    - Add recommendation engine\n4. **Testing & Optimization** (Week 4):\n    - A/B testing for coaching effectiveness\n    - Performance optimization\n    - User feedback integration\n    - Production deployment\n\n---\n\n## **💰 STEP 2A: FINANCIAL GAMIFICATION MICROSERVICE**\n\n### **Fintech Infrastructure Tools:**\n\n**Payment Processing:**\n\n- **Stripe** - Fiat on-ramp/off-ramp\n- **Plaid** - Bank account verification\n- **Circle** - USDC integration\n- **MoonPay** - Crypto on-ramp\n\n**Wallet Infrastructure:**\n\n```bash\nnpm install @circle/w3s-pw-web-sdk # Circle's wallet SDK\nnpm install ethers\nnpm install web3\nnpm install @walletconnect/client\n```\n\n**KYC/AML Services:**\n\n- **Jumio** - Identity verification\n- **Onfido** - Document verification\n- **Chainalysis** - Transaction monitoring\n- **Elliptic** - AML compliance\n\n**Custodial Wallet Implementation:**\n\n```tsx\n// wallet-service.ts\nimport { CircleWallets } from '@circle/w3s-pw-web-sdk';\n\nexport class CustodialWalletService {\n  private circleWallets: CircleWallets;\n  \n  constructor() {\n    this.circleWallets = new CircleWallets({\n      apiKey: [process.env.CIRCLE](http://process.env.CIRCLE)_API_KEY,\n      environment: 'sandbox' // or 'production'\n    });\n  }\n  \n  async createUserWallet(userId: string) {\n    try {\n      const wallet = await this.circleWallets.createWallet({\n        userId,\n        blockchains: ['ETH', 'MATIC'],\n        currency: 'USD'\n      });\n      \n      return {\n        walletId: [wallet.id](http://wallet.id),\n        address: wallet.address,\n        networks: wallet.blockchains\n      };\n    } catch (error) {\n      throw new Error(`Wallet creation failed: ${error.message}`);\n    }\n  }\n  \n  async processStake(userId: string, amount: number, challengeId: string) {\n    // Instant UX confirmation\n    const pendingTransaction = await this.createPendingTransaction(userId, amount);\n    \n    // Background blockchain settlement\n    this.processBlockchainSettlement(pendingTransaction, challengeId);\n    \n    return {\n      status: 'confirmed',\n      transactionId: [pendingTransaction.id](http://pendingTransaction.id),\n      message: 'Stake placed successfully!'\n    };\n  }\n}\n```\n\n**Compliance Framework:**\n\n```tsx\n// compliance-service.ts\nexport class ComplianceService {\n  async performKYC(userId: string, documents: DocumentSet) {\n    const jumioResult = await this.jumioVerification(documents);\n    const sanctionsCheck = await this.sanctionsScreening(userId);\n    const riskAssessment = await this.calculateRiskScore(userId);\n    \n    return {\n      approved: jumioResult.verified && !sanctionsCheck.flagged,\n      riskLevel: riskAssessment.level,\n      requiredActions: this.getRequiredActions(riskAssessment)\n    };\n  }\n  \n  async monitorTransaction(transaction: Transaction) {\n    const amlResult = await this.chainanalysisCheck(transaction);\n    \n    if (amlResult.riskScore > 70) {\n      await this.flagForReview(transaction, amlResult);\n      return { status: 'under_review' };\n    }\n    \n    return { status: 'approved' };\n  }\n}\n```\n\n### **Step-by-Step Implementation:**\n\n1. **Wallet Infrastructure** (Week 1):\n    - Set up Circle custodial wallets\n    - Implement hot/cold storage separation\n    - Configure multi-signature security\n    - Build user onboarding flow\n2. **Payment Integration** (Week 2):\n    - Integrate Stripe for fiat payments\n    - Set up crypto on-ramp with MoonPay\n    - Implement instant transaction UX\n    - Build batched settlement system\n3. **Compliance System** (Week 3):\n    - Integrate KYC providers (Jumio/Onfido)\n    - Set up AML monitoring\n    - Build compliance dashboard\n    - Implement automated reporting\n4. **Testing & Launch** (Week 4):\n    - End-to-end payment testing\n    - Security penetration testing\n    - Compliance audit\n    - Production deployment\n\n---\n\n# 🔧 **PHASE 2: INTEGRATION & ADVANCED FEATURES**\n\n## **🔗 STEP 3A: CROSS-SERVICE INTEGRATION BRIDGE**\n\n### **API Gateway & Security Tools:**\n\n**API Gateway Solutions:**\n\n- **Kong** - Open-source API gateway\n- **AWS API Gateway** - Managed service\n- **Express Gateway** - Node.js based\n- **Traefik** - Modern reverse proxy\n\n**Authentication & Security:**\n\n```bash\nnpm install @auth0/nextjs-auth0\nnpm install jsonwebtoken\nnpm install passport\nnpm install helmet\nnpm install rate-limiter-flexible\n```\n\n**Event Streaming:**\n\n```bash\nnpm install kafkajs # Apache Kafka client\nnpm install @aws-sdk/client-eventbridge # AWS EventBridge\nnpm install redis # Redis for pub/sub\nnpm install [socket.io](http://socket.io) # WebSocket events\n```\n\n**Integration Bridge Architecture:**\n\n```tsx\n// integration-bridge.ts\nimport { EventEmitter } from 'events';\nimport { Kafka } from 'kafkajs';\n\nexport class IntegrationBridge extends EventEmitter {\n  private kafka: Kafka;\n  private redis: Redis;\n  \n  constructor() {\n    super();\n    this.kafka = new Kafka({\n      clientId: 'courtmetrics-bridge',\n      brokers: [process.env.KAFKA_BROKER]\n    });\n  }\n  \n  async publishWorkoutCompletion(workoutData: WorkoutCompletion) {\n    const producer = this.kafka.producer();\n    \n    await producer.send({\n      topic: 'workout-completions',\n      messages: [{\n        key: workoutData.userId,\n        value: JSON.stringify({\n          ...workoutData,\n          timestamp: new Date().toISOString(),\n          signature: this.signData(workoutData)\n        })\n      }]\n    });\n    \n    this.emit('workout-completed', workoutData);\n  }\n  \n  async subscribeToFinancialEvents() {\n    const consumer = this.kafka.consumer({ groupId: 'courtmetrics-main' });\n    \n    await consumer.subscribe({ topic: 'financial-events' });\n    \n    await [consumer.run](http://consumer.run)({\n      eachMessage: async ({ message }) => {\n        const event = JSON.parse(message.value.toString());\n        this.handleFinancialEvent(event);\n      }\n    });\n  }\n}\n```\n\n### **Step-by-Step Implementation:**\n\n1. **API Gateway Setup** (Week 1):\n    - Deploy Kong or AWS API Gateway\n    - Configure authentication and rate limiting\n    - Set up SSL termination\n    - Implement request/response logging\n2. **Event Streaming** (Week 2):\n    - Set up Apache Kafka cluster\n    - Configure event schemas\n    - Build publisher/subscriber services\n    - Implement event sourcing patterns\n3. **Security Layer** (Week 3):\n    - Implement JWT authentication\n    - Set up API key management\n    - Configure rate limiting\n    - Add request validation\n4. **Monitoring & Testing** (Week 4):\n    - Set up distributed tracing\n    - Configure health checks\n    - Build integration test suites\n    - Performance optimization\n\n---\n\n## **🎯 STEP 4A: VIRAL GROWTH ENGINE**\n\n### **Social & Growth Tools:**\n\n**Social Media Integration:**\n\n```bash\nnpm install next-auth # Social login\nnpm install @supabase/supabase-js # Social features\nnpm install react-share # Social sharing\nnpm install @clerk/nextjs # User management\n```\n\n**Analytics & A/B Testing:**\n\n```bash\nnpm install @amplitude/analytics-browser # Event tracking\nnpm install mixpanel-browser # User analytics\nnpm install @growthbook/growthbook # A/B testing\nnpm install @segment/analytics-node # Data pipeline\n```\n\n**Referral System:**\n\n```tsx\n// referral-engine.ts\nexport class ReferralEngine {\n  async createReferralCode(userId: string): Promise<ReferralCode> {\n    const code = this.generateUniqueCode();\n    \n    return await this.db.referralCode.create({\n      data: {\n        code,\n        userId,\n        createdAt: new Date(),\n        maxUses: 10,\n        reward: {\n          referrer: { type: 'stake_bonus', amount: 25 },\n          referee: { type: 'free_premium', duration: '7d' }\n        }\n      }\n    });\n  }\n  \n  async processReferralConversion(\n    referralCode: string,\n    newUserId: string\n  ): Promise<ReferralReward[]> {\n    const referral = await this.validateReferralCode(referralCode);\n    \n    if (!referral.isValid) {\n      throw new Error('Invalid referral code');\n    }\n    \n    // Award referrer\n    const referrerReward = await this.awardReferrerBonus(\n      referral.referrerId,\n      referral.reward.referrer\n    );\n    \n    // Award new user\n    const refereeReward = await this.awardRefereeBonus(\n      newUserId,\n      referral.reward.referee\n    );\n    \n    // Track viral coefficient\n    await this.updateViralMetrics(referral.referrerId, 'conversion');\n    \n    return [referrerReward, refereeReward];\n  }\n  \n  async calculateViralCoefficient(\n    timeframe: string = '30d'\n  ): Promise<ViralMetrics> {\n    const metrics = await this.getViralMetrics(timeframe);\n    \n    return {\n      viralCoefficient: metrics.totalInvites / metrics.totalUsers,\n      conversionRate: metrics.conversions / metrics.totalInvites,\n      averageInvitesPerUser: metrics.totalInvites / metrics.activeInviters,\n      topReferrers: await this.getTopReferrers(timeframe, 10)\n    };\n  }\n}\n```\n\n**Social Sharing System:**\n\n```tsx\n// social-sharing.ts\nexport class SocialSharingEngine {\n  async generateAchievementPost(\n    userId: string,\n    achievement: Achievement\n  ): Promise<SocialPost> {\n    const user = await this.getUserProfile(userId);\n    const template = this.getAchievementTemplate(achievement.type);\n    \n    return {\n      platforms: ['twitter', 'instagram', 'facebook'],\n      content: {\n        text: template.message\n          .replace('{username}', user.displayName)\n          .replace('{achievement}', achievement.title)\n          .replace('{metric}', achievement.metric),\n        image: await this.generateAchievementImage(user, achievement),\n        hashtags: ['#CourtMetrics', '#FitnessGoals', '#Achieved'],\n        link: `[https://app.courtmetrics.com/achievement/${achievement.id}`](https://app.courtmetrics.com/achievement/${achievement.id}`)\n      },\n      scheduledTime: this.getOptimalPostingTime(user.timezone)\n    };\n  }\n  \n  async trackSharePerformance(shareId: string): Promise<ShareMetrics> {\n    return {\n      clicks: await this.getShareClicks(shareId),\n      conversions: await this.getShareConversions(shareId),\n      engagement: await this.getShareEngagement(shareId),\n      viralReach: await this.calculateViralReach(shareId)\n    };\n  }\n}\n```\n\n### **Step-by-Step Implementation:**\n\n1. **Viral Mechanics** (Week 1):\n    - Build social sharing tools\n    - Implement referral system\n    - Create achievement content generator\n    - Set up social media integrations\n2. **Growth Analytics** (Week 2):\n    - Implement A/B testing framework\n    - Build viral coefficient tracking\n    - Create cohort analysis dashboard\n    - Set up conversion funnel analysis\n3. **Optimization** (Week 3):\n    - Test viral features with beta users\n    - Optimize referral incentives\n    - Refine social content templates\n    - Launch growth campaigns\n\nThis implementation guide provides a comprehensive roadmap for building the complete Kingmaker Software Blueprint with all the tools, code examples, and step-by-step instructions needed for rapid development and deployment.","size_bytes":24091},"attached_assets/drizzle.config_1757440127784.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/postcss.config_1757440127786.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/replit_1757440127786.md":{"content":"# CourtFit Basketball Training Application\n\n## Overview\n\nCourtFit is an AI-powered basketball training application designed to enhance user skills through structured workout programs, progress tracking, achievement systems, and wearable device integration. It offers professional workout plans for gym and court, real-time analytics, personalized AI workout generation, and advanced biometric monitoring. The system supports user authentication, workout session management, progress visualization, and integrates with wearable devices for in-depth training insights. Its business vision is to provide a comprehensive, personalized training experience that helps basketball enthusiasts improve their game efficiently and effectively.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nCourtFit utilizes a full-stack architecture with a clear separation between client and server. The frontend is built with React and TypeScript, using Vite for building, while the backend is an Express.js application also in TypeScript. The project adopts a monorepo structure, sharing types and schemas.\n\n**Frontend:**\n-   **Framework & Language:** React with TypeScript.\n-   **Routing:** Wouter for lightweight client-side routing.\n-   **State Management:** TanStack React Query for server state management.\n-   **UI Components:** shadcn/ui built on Radix UI primitives for accessibility and customization.\n-   **Styling:** Tailwind CSS with CSS custom properties for consistent theming.\n-   **Real-time Features:** Implements real-time heart rate monitoring and workout session updates.\n\n**Backend:**\n-   **Framework:** Express.js with a RESTful API design.\n-   **Organization:** Centralized route registration and modular endpoint definitions.\n-   **Data Access:** Storage interface pattern for database operations.\n-   **Middleware:** Includes request logging, error handling, and authentication.\n-   **Services:** Dedicated service layer for wearable device integration (Apple Watch, Garmin, Coros).\n\n**Database:**\n-   **Technology:** PostgreSQL with Drizzle ORM for type-safe operations.\n-   **Schema:** Centralized schema definitions with Zod validation.\n-   **Data Model:** Supports user management, workout categories, exercises, sessions, performance tracking, wearable device data, AI workout templates, and enhanced exercise categorization.\n-   **Sessions:** Integrates with `connect-pg-simple` for secure session management.\n-   **Migrations:** Uses Drizzle Kit for schema migrations.\n\n**Authentication:**\n-   **Method:** Replit OAuth integration using OpenID Connect (OIDC).\n-   **Session Management:** PostgreSQL-backed sessions with secure cookie settings.\n-   **User Management:** Automatic user creation and profile synchronization with Replit user data.\n-   **Security:** Middleware-based route protection.\n\n**Wearable Device Integration:**\n-   Comprehensive system supporting Apple Watch (HealthKit), Garmin, and Coros.\n-   Manages device connection, configuration, and real-time biometric monitoring (heart rate, HRV, calories, steps).\n-   Provides real-time feedback during workouts and calculates daily recovery scores.\n\n**AI Workout Generation:**\n-   Intelligent personalization based on user profiles and preferences.\n-   AI-driven workout template selection, customization, and progressive adaptation.\n-   Adjusts workout intensity based on recovery metrics.\n-   Intelligent exercise recommendation.\n\n**Real-time Features:**\n-   Custom React hooks for workout timers.\n-   Real-time progress tracking, performance metrics feedback, live heart rate monitoring, and recovery metric calculations during sessions.\n\n**Data Seeding:**\n-   Pre-populated workout categories, exercises, and training programs for professional content.\n-   Includes 50+ enhanced exercises and pre-configured AI workout templates.\n\n## External Dependencies\n\n-   **Frontend & Backend Core:** React 18+, Express.js, TypeScript, Vite.\n-   **Database:** PostgreSQL (via Neon serverless PostgreSQL), Drizzle ORM, `@neondatabase/serverless`.\n-   **Authentication:** `openid-client`, Passport.js, `express-session`, `connect-pg-simple`.\n-   **UI & Styling:** shadcn/ui, Radix UI, Tailwind CSS, Lucide React, `class-variance-authority`.\n-   **State Management & Forms:** TanStack React Query, React Hook Form, `@hookform/resolvers`, Zod.\n-   **Development Tools:** `@replit/vite-plugin-runtime-error-modal`, PostCSS, `tsx`.\n-   **Utilities:** `date-fns`, `clsx`, `nanoid`, `memoizee`.","size_bytes":4511},"attached_assets/tailwind.config_1757440127787.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"attached_assets/vite.config_1757440127787.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { aiTrainerService } from \"./services/aiTrainer\";\nimport { insertWorkoutSessionSchema, insertUserProfileSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const profile = await storage.getUserProfile(userId);\n      res.json({ ...user, profile });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard data\n  app.get('/api/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const [stats, achievements, leaderboard, activityFeed] = await Promise.all([\n        storage.getUserStats(userId),\n        storage.getUserAchievements(userId),\n        storage.getLeaderboard(10),\n        storage.getActivityFeed(userId, 10),\n      ]);\n\n      res.json({\n        stats,\n        achievements,\n        leaderboard,\n        activityFeed,\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Workouts\n  app.get('/api/workouts', isAuthenticated, async (req: any, res) => {\n    try {\n      const workouts = await storage.getWorkouts(20);\n      res.json(workouts);\n    } catch (error) {\n      console.error(\"Error fetching workouts:\", error);\n      res.status(500).json({ message: \"Failed to fetch workouts\" });\n    }\n  });\n\n  app.get('/api/workouts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const workout = await storage.getWorkoutById(req.params.id);\n      if (!workout) {\n        return res.status(404).json({ message: \"Workout not found\" });\n      }\n      res.json(workout);\n    } catch (error) {\n      console.error(\"Error fetching workout:\", error);\n      res.status(500).json({ message: \"Failed to fetch workout\" });\n    }\n  });\n\n  // AI-generated workouts\n  app.post('/api/ai/generate-workout', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getUserProfile(userId);\n      const stats = await storage.getUserStats(userId);\n      \n      const workout = await aiTrainerService.generatePersonalizedWorkout({\n        userProfile: profile,\n        userStats: stats,\n        preferences: req.body.preferences || {},\n      });\n\n      res.json(workout);\n    } catch (error) {\n      console.error(\"Error generating AI workout:\", error);\n      res.status(500).json({ message: \"Failed to generate AI workout\" });\n    }\n  });\n\n  app.post('/api/ai/workout-insights', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const sessions = await storage.getUserWorkoutSessions(userId, 5);\n      const profile = await storage.getUserProfile(userId);\n      \n      const insights = await aiTrainerService.generateInsights({\n        recentSessions: sessions,\n        userProfile: profile,\n      });\n\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Error generating workout insights:\", error);\n      res.status(500).json({ message: \"Failed to generate workout insights\" });\n    }\n  });\n\n  // Workout sessions\n  app.post('/api/sessions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const sessionData = insertWorkoutSessionSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const session = await storage.createWorkoutSession(sessionData);\n      res.json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid session data\", errors: error.errors });\n      }\n      console.error(\"Error creating session:\", error);\n      res.status(500).json({ message: \"Failed to create session\" });\n    }\n  });\n\n  app.patch('/api/sessions/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const sessionId = req.params.id;\n      \n      // Verify session belongs to user\n      const sessions = await storage.getUserWorkoutSessions(userId);\n      const session = sessions.find(s => s.id === sessionId);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      const updatedSession = await storage.updateWorkoutSession(sessionId, req.body);\n      \n      // Update user stats if session was completed\n      if (req.body.status === 'completed' && req.body.completedAt) {\n        const profile = await storage.getUserProfile(userId);\n        if (profile) {\n          await storage.updateUserProfile(userId, {\n            totalWorkouts: (profile.totalWorkouts || 0) + 1,\n            currentStreak: (profile.currentStreak || 0) + 1,\n            totalPoints: (profile.totalPoints || 0) + 50, // Base points for completion\n          });\n\n          // Create activity\n          await storage.createActivity(userId, {\n            activityType: 'workout_completed',\n            title: 'Completed workout',\n            description: `Finished a ${updatedSession.totalDuration || 0} minute workout`,\n            points: 50,\n          });\n        }\n      }\n\n      res.json(updatedSession);\n    } catch (error) {\n      console.error(\"Error updating session:\", error);\n      res.status(500).json({ message: \"Failed to update session\" });\n    }\n  });\n\n  // User profile\n  app.get('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getUserProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.patch('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profileData = insertUserProfileSchema.partial().parse(req.body);\n      \n      const updatedProfile = await storage.updateUserProfile(userId, profileData);\n      res.json(updatedProfile);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid profile data\", errors: error.errors });\n      }\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Workout inbox routes\n  app.get('/api/workout-inbox', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      let inboxItems = await storage.getWorkoutInboxItems(userId);\n      \n      // If no items exist, create some sample data for demonstration\n      if (inboxItems.length === 0) {\n        const sampleItems = [\n          {\n            userId,\n            workoutData: {\n              heartRateData: [78, 142, 165, 158, 171, 159, 88],\n              steps: 3420,\n              duration: 52\n            },\n            autoDetectedType: 'Basketball',\n            confidence: '0.91',\n            title: 'Basketball Training - Apple Watch',\n            duration: 52,\n            caloriesBurned: 486,\n            averageHeartRate: 159,\n            aiSummary: 'High-intensity interval pattern with quick direction changes. Typical basketball training session.',\n          },\n          {\n            userId,\n            workoutData: {\n              heartRateData: [85, 95, 98, 92, 89],\n              steps: 890,\n              duration: 25\n            },\n            autoDetectedType: 'Strength Training',\n            confidence: '0.87',\n            title: 'Gym Session - Garmin',\n            duration: 25,\n            caloriesBurned: 198,\n            averageHeartRate: 92,\n            aiSummary: 'Low step count with sustained moderate heart rate. Resistance training detected.',\n          },\n          {\n            userId,\n            workoutData: {\n              heartRateData: [92, 156, 168, 175, 162, 148, 95],\n              steps: 4200,\n              duration: 38\n            },\n            autoDetectedType: 'Cardio',\n            confidence: '0.85',\n            title: 'Morning Run - Apple Watch',\n            duration: 38,\n            caloriesBurned: 342,\n            averageHeartRate: 157,\n            aiSummary: 'Steady elevated heart rate with consistent step pattern. Running workout identified.',\n          }\n        ];\n        \n        // Create sample items\n        for (const item of sampleItems) {\n          await storage.createWorkoutInboxItem(item);\n        }\n        \n        // Fetch the newly created items\n        inboxItems = await storage.getWorkoutInboxItems(userId);\n      }\n      \n      res.json(inboxItems);\n    } catch (error) {\n      console.error(\"Error fetching workout inbox:\", error);\n      res.status(500).json({ message: \"Failed to fetch workout inbox\" });\n    }\n  });\n\n  app.post('/api/workout-inbox/:id/categorize', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const itemId = req.params.id;\n      const { category } = req.body;\n      \n      const updatedItem = await storage.categorizeWorkoutInboxItem(itemId, userId, category);\n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Error categorizing workout:\", error);\n      res.status(500).json({ message: \"Failed to categorize workout\" });\n    }\n  });\n\n  app.post('/api/workout-inbox/:id/ignore', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const itemId = req.params.id;\n      \n      const updatedItem = await storage.ignoreWorkoutInboxItem(itemId, userId);\n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Error ignoring workout:\", error);\n      res.status(500).json({ message: \"Failed to ignore workout\" });\n    }\n  });\n\n  // AI workout message processing\n  app.post('/api/ai/process-workout-message', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { message } = req.body;\n      \n      // Simple pattern matching for workout detection\n      const workoutPatterns = {\n        basketball: /basketball|ball|court|dribbl|shoot/i,\n        cardio: /cardio|run|jog|sprint/i,\n        strength: /strength|weight|lift|gym/i,\n      };\n      \n      // Extract duration from message\n      const durationMatch = message.match(/(\\d+)\\s*(min|minute|hour)/i);\n      const duration = durationMatch ? parseInt(durationMatch[1]) : 30;\n      \n      let workoutType = 'general';\n      let category = 'other';\n      \n      if (workoutPatterns.basketball.test(message)) {\n        workoutType = 'basketball training';\n        category = 'basketball_training';\n      } else if (workoutPatterns.cardio.test(message)) {\n        workoutType = 'cardio session';\n        category = 'cardio';\n      } else if (workoutPatterns.strength.test(message)) {\n        workoutType = 'strength training';\n        category = 'strength';\n      }\n      \n      // Create a workout session entry (for manual/AI entries, we'll use a default workoutId)\n      await storage.createWorkoutSession({\n        userId,\n        workoutId: 'manual-entry', // placeholder for manual entries\n        status: 'completed',\n        totalDuration: duration * 60, // convert to seconds\n        caloriesBurned: Math.floor(duration * 8), // rough estimate\n        notes: `AI logged: ${message}`,\n      });\n      \n      const response = `Great! I've logged your ${duration}-minute ${workoutType}. Keep up the excellent work!`;\n      \n      res.json({ \n        response,\n        workoutCreated: true,\n        category,\n        duration\n      });\n    } catch (error) {\n      console.error(\"Error processing workout message:\", error);\n      res.status(500).json({ message: \"Failed to process workout message\" });\n    }\n  });\n\n  // Mock biometric data endpoint (for wearable integration demo)\n  app.get('/api/biometrics/live', isAuthenticated, async (req: any, res) => {\n    // Mock real-time biometric data\n    const mockData = {\n      heartRate: Math.floor(Math.random() * (180 - 60) + 60),\n      steps: Math.floor(Math.random() * 5000 + 2000),\n      calories: Math.floor(Math.random() * 500 + 200),\n      hrv: Math.floor(Math.random() * 50 + 30),\n      timestamp: new Date().toISOString(),\n    };\n    \n    res.json(mockData);\n  });\n\n  // AI fitness plan generation\n  app.post('/api/ai/generate-fitness-plan', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getUserProfile(userId);\n      const stats = await storage.getUserStats(userId);\n      \n      const generatedPlan = await aiTrainerService.generateFitnessPlan({\n        userProfile: profile,\n        userStats: stats,\n        preferences: req.body.preferences || {},\n      });\n\n      // Map methodology to valid planType enum values\n      const methodologyToPlanType = (methodology: string) => {\n        const methodologyLower = methodology.toLowerCase();\n        switch (methodologyLower) {\n          case 'goata':\n            return 'mixed';\n          case 'soviet':\n            return 'strength';\n          case 'nba':\n            return 'basketball';\n          case 'hypertrophy':\n            return 'strength';\n          default:\n            return 'mixed';\n        }\n      };\n\n      // Save the generated plan to the database\n      const planToSave = {\n        name: generatedPlan.name,\n        description: generatedPlan.description,\n        methodology: generatedPlan.methodology,\n        planType: methodologyToPlanType(generatedPlan.methodology || 'mixed'),\n        difficulty: generatedPlan.difficulty,\n        duration: generatedPlan.duration,\n        workoutsPerWeek: generatedPlan.workoutsPerWeek,\n        aiGenerated: true,\n        isPopular: false,\n        createdBy: userId,\n      };\n\n      const savedPlan = await storage.createFitnessPlan(planToSave);\n      \n      // Return the saved plan with its database ID\n      res.json({\n        ...generatedPlan,\n        id: savedPlan.id,\n        createdBy: savedPlan.createdBy,\n        createdAt: savedPlan.createdAt,\n      });\n    } catch (error) {\n      console.error(\"Error generating AI fitness plan:\", error);\n      res.status(500).json({ message: \"Failed to generate AI fitness plan\" });\n    }\n  });\n\n  // Fitness Plans CRUD\n  app.get('/api/fitness-plans', isAuthenticated, async (req, res) => {\n    try {\n      const plans = await storage.getFitnessPlans(20);\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching fitness plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch fitness plans\" });\n    }\n  });\n\n  app.get('/api/fitness-plans/:id', isAuthenticated, async (req, res) => {\n    try {\n      const plan = await storage.getFitnessPlanWithWorkouts(req.params.id);\n      if (!plan) {\n        return res.status(404).json({ message: \"Fitness plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Error fetching fitness plan:\", error);\n      res.status(500).json({ message: \"Failed to fetch fitness plan\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15613},"server/storage.ts":{"content":"import {\n  users,\n  userProfiles,\n  fitnessPlans,\n  planWorkouts,\n  workouts,\n  workoutSessions,\n  exercises,\n  achievements,\n  userAchievements,\n  biometricData,\n  activityFeed,\n  workoutInbox,\n  type User,\n  type UpsertUser,\n  type FitnessPlan,\n  type InsertFitnessPlan,\n  type PlanWorkout,\n  type InsertPlanWorkout,\n  type Workout,\n  type WorkoutSession,\n  type UserProfile,\n  type Achievement,\n  type BiometricData,\n  type WorkoutInbox,\n  type Exercise,\n  type InsertExercise,\n  type InsertWorkout,\n  type InsertWorkoutSession,\n  type InsertUserProfile,\n  type InsertWorkoutInbox,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // User profile operations\n  getUserProfile(userId: string): Promise<UserProfile | undefined>;\n  updateUserProfile(userId: string, data: Partial<InsertUserProfile>): Promise<UserProfile>;\n  \n  // Fitness Plan operations (top level of hierarchy)\n  getFitnessPlans(limit?: number): Promise<FitnessPlan[]>;\n  getFitnessPlanById(id: string): Promise<FitnessPlan | undefined>;\n  getFitnessPlanWithWorkouts(id: string): Promise<any>;\n  createFitnessPlan(plan: InsertFitnessPlan): Promise<FitnessPlan>;\n  addWorkoutToPlan(planWorkout: InsertPlanWorkout): Promise<PlanWorkout>;\n  \n  // Workout operations (middle level of hierarchy)\n  getWorkouts(limit?: number): Promise<Workout[]>;\n  getWorkoutById(id: string): Promise<Workout | undefined>;\n  getWorkoutWithExercises(id: string): Promise<any>;\n  createWorkout(workout: InsertWorkout): Promise<Workout>;\n  addExerciseToWorkout(exercise: InsertExercise): Promise<Exercise>;\n  \n  // Session operations\n  createWorkoutSession(session: InsertWorkoutSession): Promise<WorkoutSession>;\n  updateWorkoutSession(sessionId: string, data: Partial<WorkoutSession>): Promise<WorkoutSession>;\n  getUserWorkoutSessions(userId: string, limit?: number): Promise<WorkoutSession[]>;\n  \n  // Achievement operations\n  getUserAchievements(userId: string): Promise<Achievement[]>;\n  unlockAchievement(userId: string, achievementId: string): Promise<void>;\n  \n  // Analytics operations\n  getUserStats(userId: string): Promise<{\n    totalWorkouts: number;\n    currentStreak: number;\n    totalPoints: number;\n    averageHeartRate: number;\n    recoveryScore: number;\n  }>;\n  \n  // Leaderboard operations\n  getLeaderboard(limit?: number): Promise<Array<{\n    user: User;\n    profile: UserProfile;\n    rank: number;\n  }>>;\n  \n  // Activity feed\n  getActivityFeed(userId: string, limit?: number): Promise<any[]>;\n  createActivity(userId: string, activity: {\n    activityType: string;\n    title: string;\n    description?: string;\n    points?: number;\n    metadata?: any;\n  }): Promise<void>;\n  \n  // Workout inbox operations\n  getWorkoutInboxItems(userId: string): Promise<WorkoutInbox[]>;\n  createWorkoutInboxItem(item: InsertWorkoutInbox): Promise<WorkoutInbox>;\n  categorizeWorkoutInboxItem(itemId: string, userId: string, category: string): Promise<WorkoutInbox>;\n  ignoreWorkoutInboxItem(itemId: string, userId: string): Promise<WorkoutInbox>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Create user profile if it doesn't exist\n    await db\n      .insert(userProfiles)\n      .values({\n        userId: user.id,\n        experience: 'beginner',\n        totalWorkouts: 0,\n        totalPoints: 0,\n        currentStreak: 0,\n        longestStreak: 0,\n        skillLevel: 1,\n        recoveryScore: sql`75.0`,\n      })\n      .onConflictDoNothing();\n    \n    return user;\n  }\n\n  async getUserProfile(userId: string): Promise<UserProfile | undefined> {\n    const [profile] = await db.select().from(userProfiles).where(eq(userProfiles.userId, userId));\n    return profile;\n  }\n\n  async updateUserProfile(userId: string, data: Partial<InsertUserProfile>): Promise<UserProfile> {\n    const [profile] = await db\n      .update(userProfiles)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(userProfiles.userId, userId))\n      .returning();\n    return profile;\n  }\n\n  async getWorkouts(limit = 20): Promise<Workout[]> {\n    return await db\n      .select()\n      .from(workouts)\n      .orderBy(desc(workouts.createdAt))\n      .limit(limit);\n  }\n\n  async getWorkoutById(id: string): Promise<Workout | undefined> {\n    const [workout] = await db.select().from(workouts).where(eq(workouts.id, id));\n    return workout;\n  }\n\n  // Fitness Plan operations (top level of hierarchy)\n  async getFitnessPlans(limit = 20): Promise<FitnessPlan[]> {\n    return await db\n      .select()\n      .from(fitnessPlans)\n      .orderBy(desc(fitnessPlans.createdAt))\n      .limit(limit);\n  }\n\n  async getFitnessPlanById(id: string): Promise<FitnessPlan | undefined> {\n    const [plan] = await db.select().from(fitnessPlans).where(eq(fitnessPlans.id, id));\n    return plan;\n  }\n\n  async getFitnessPlanWithWorkouts(id: string): Promise<any> {\n    const plan = await db.query.fitnessPlans.findFirst({\n      where: eq(fitnessPlans.id, id),\n      with: {\n        planWorkouts: {\n          with: {\n            workout: {\n              with: {\n                exercises: true,\n              }\n            }\n          },\n          orderBy: [planWorkouts.week, planWorkouts.day, planWorkouts.order],\n        }\n      }\n    });\n    return plan;\n  }\n\n  async createFitnessPlan(plan: InsertFitnessPlan): Promise<FitnessPlan> {\n    const [newPlan] = await db.insert(fitnessPlans).values(plan).returning();\n    return newPlan;\n  }\n\n  async addWorkoutToPlan(planWorkout: InsertPlanWorkout): Promise<PlanWorkout> {\n    const [newPlanWorkout] = await db.insert(planWorkouts).values(planWorkout).returning();\n    return newPlanWorkout;\n  }\n\n  async createWorkout(workout: InsertWorkout): Promise<Workout> {\n    const [newWorkout] = await db.insert(workouts).values(workout).returning();\n    return newWorkout;\n  }\n\n  async getWorkoutWithExercises(id: string): Promise<any> {\n    const workout = await db.query.workouts.findFirst({\n      where: eq(workouts.id, id),\n      with: {\n        exercises: {\n          orderBy: exercises.order,\n        }\n      }\n    });\n    return workout;\n  }\n\n  async addExerciseToWorkout(exercise: InsertExercise): Promise<Exercise> {\n    const [newExercise] = await db.insert(exercises).values(exercise).returning();\n    return newExercise;\n  }\n\n  async createWorkoutSession(session: InsertWorkoutSession): Promise<WorkoutSession> {\n    const [newSession] = await db.insert(workoutSessions).values(session).returning();\n    return newSession;\n  }\n\n  async updateWorkoutSession(sessionId: string, data: Partial<WorkoutSession>): Promise<WorkoutSession> {\n    const [session] = await db\n      .update(workoutSessions)\n      .set(data)\n      .where(eq(workoutSessions.id, sessionId))\n      .returning();\n    return session;\n  }\n\n  async getUserWorkoutSessions(userId: string, limit = 10): Promise<WorkoutSession[]> {\n    return await db\n      .select()\n      .from(workoutSessions)\n      .where(eq(workoutSessions.userId, userId))\n      .orderBy(desc(workoutSessions.startedAt))\n      .limit(limit);\n  }\n\n  async getUserAchievements(userId: string): Promise<Achievement[]> {\n    const result = await db\n      .select({\n        achievement: achievements,\n      })\n      .from(userAchievements)\n      .innerJoin(achievements, eq(userAchievements.achievementId, achievements.id))\n      .where(eq(userAchievements.userId, userId));\n    \n    return result.map(r => r.achievement);\n  }\n\n  async unlockAchievement(userId: string, achievementId: string): Promise<void> {\n    await db.insert(userAchievements).values({\n      userId,\n      achievementId,\n    }).onConflictDoNothing();\n  }\n\n  async getUserStats(userId: string): Promise<{\n    totalWorkouts: number;\n    currentStreak: number;\n    totalPoints: number;\n    averageHeartRate: number;\n    recoveryScore: number;\n  }> {\n    const [profile] = await db.select().from(userProfiles).where(eq(userProfiles.userId, userId));\n    \n    // Get average heart rate from recent sessions\n    const [heartRateResult] = await db\n      .select({\n        avgHeartRate: sql<number>`AVG(${workoutSessions.averageHeartRate})`,\n      })\n      .from(workoutSessions)\n      .where(and(\n        eq(workoutSessions.userId, userId),\n        sql`${workoutSessions.averageHeartRate} IS NOT NULL`\n      ));\n\n    return {\n      totalWorkouts: profile?.totalWorkouts || 0,\n      currentStreak: profile?.currentStreak || 0,\n      totalPoints: profile?.totalPoints || 0,\n      averageHeartRate: Math.round(heartRateResult?.avgHeartRate || 0),\n      recoveryScore: parseFloat(profile?.recoveryScore?.toString() || '0'),\n    };\n  }\n\n  async getLeaderboard(limit = 10): Promise<Array<{\n    user: User;\n    profile: UserProfile;\n    rank: number;\n  }>> {\n    const results = await db\n      .select({\n        user: users,\n        profile: userProfiles,\n      })\n      .from(userProfiles)\n      .innerJoin(users, eq(userProfiles.userId, users.id))\n      .orderBy(desc(userProfiles.totalPoints))\n      .limit(limit);\n\n    return results.map((result, index) => ({\n      user: result.user,\n      profile: result.profile,\n      rank: index + 1,\n    }));\n  }\n\n  async getActivityFeed(userId: string, limit = 20): Promise<any[]> {\n    // Get activities from user and their friends\n    return await db\n      .select({\n        id: activityFeed.id,\n        user: users,\n        activityType: activityFeed.activityType,\n        title: activityFeed.title,\n        description: activityFeed.description,\n        points: activityFeed.points,\n        createdAt: activityFeed.createdAt,\n        metadata: activityFeed.metadata,\n      })\n      .from(activityFeed)\n      .innerJoin(users, eq(activityFeed.userId, users.id))\n      .where(eq(activityFeed.isPublic, true))\n      .orderBy(desc(activityFeed.createdAt))\n      .limit(limit);\n  }\n\n  async createActivity(userId: string, activity: {\n    activityType: string;\n    title: string;\n    description?: string;\n    points?: number;\n    metadata?: any;\n  }): Promise<void> {\n    await db.insert(activityFeed).values({\n      userId,\n      ...activity,\n    });\n  }\n\n  // Workout inbox operations\n  async getWorkoutInboxItems(userId: string): Promise<WorkoutInbox[]> {\n    const items = await db\n      .select()\n      .from(workoutInbox)\n      .where(eq(workoutInbox.userId, userId))\n      .orderBy(desc(workoutInbox.receivedAt));\n    \n    return items;\n  }\n\n  async createWorkoutInboxItem(item: InsertWorkoutInbox): Promise<WorkoutInbox> {\n    const [created] = await db\n      .insert(workoutInbox)\n      .values(item)\n      .returning();\n    \n    return created;\n  }\n\n  async categorizeWorkoutInboxItem(itemId: string, userId: string, category: string): Promise<WorkoutInbox> {\n    const [updated] = await db\n      .update(workoutInbox)\n      .set({\n        status: 'categorized',\n        category,\n        processedAt: new Date(),\n      })\n      .where(and(eq(workoutInbox.id, itemId), eq(workoutInbox.userId, userId)))\n      .returning();\n    \n    return updated;\n  }\n\n  async ignoreWorkoutInboxItem(itemId: string, userId: string): Promise<WorkoutInbox> {\n    const [updated] = await db\n      .update(workoutInbox)\n      .set({\n        status: 'ignored',\n        processedAt: new Date(),\n      })\n      .where(and(eq(workoutInbox.id, itemId), eq(workoutInbox.userId, userId)))\n      .returning();\n    \n    return updated;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11965},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  integer,\n  text,\n  boolean,\n  decimal,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Basketball training specific enums\nexport const difficultyEnum = pgEnum('difficulty', ['beginner', 'intermediate', 'advanced', 'pro']);\nexport const workoutTypeEnum = pgEnum('workout_type', ['strength', 'cardio', 'skills', 'recovery', 'mixed']);\nexport const deviceTypeEnum = pgEnum('device_type', ['apple_watch', 'garmin', 'coros', 'fitbit']);\nexport const planTypeEnum = pgEnum('plan_type', ['strength', 'basketball', 'conditioning', 'skills', 'recovery', 'mixed']);\n\n// Fitness Plans (GOATA, Soviet training, NBA-specific, etc.)\nexport const fitnessPlans = pgTable(\"fitness_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  methodology: varchar(\"methodology\", { length: 100 }), // 'GOATA', 'Soviet', 'NBA', 'Hypertrophy', etc.\n  planType: planTypeEnum(\"plan_type\").notNull(),\n  difficulty: difficultyEnum(\"difficulty\").notNull(),\n  duration: integer(\"duration\"), // total plan duration in weeks\n  workoutsPerWeek: integer(\"workouts_per_week\"),\n  aiGenerated: boolean(\"ai_generated\").default(false),\n  isPopular: boolean(\"is_popular\").default(false),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Workout categories\nexport const workoutCategories = pgTable(\"workout_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  iconUrl: varchar(\"icon_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Individual Workouts (can be standalone or part of a fitness plan)\nexport const workouts = pgTable(\"workouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => workoutCategories.id),\n  duration: integer(\"duration\"), // in minutes\n  difficulty: difficultyEnum(\"difficulty\").notNull(),\n  workoutType: workoutTypeEnum(\"workout_type\").notNull(),\n  isPopular: boolean(\"is_popular\").default(false),\n  aiGenerated: boolean(\"ai_generated\").default(false),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Junction table linking workouts to fitness plans with ordering\nexport const planWorkouts = pgTable(\"plan_workouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  planId: varchar(\"plan_id\").references(() => fitnessPlans.id).notNull(),\n  workoutId: varchar(\"workout_id\").references(() => workouts.id).notNull(),\n  week: integer(\"week\").notNull(), // which week of the plan\n  day: integer(\"day\").notNull(), // which day of the week (1-7)\n  order: integer(\"order\").notNull(), // order within the day if multiple workouts\n  isOptional: boolean(\"is_optional\").default(false),\n  notes: text(\"notes\"), // plan-specific notes for this workout\n});\n\n// Exercises within workouts\nexport const exercises = pgTable(\"exercises\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  workoutId: varchar(\"workout_id\").references(() => workouts.id),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  sets: integer(\"sets\"),\n  reps: integer(\"reps\"),\n  duration: integer(\"duration\"), // in seconds\n  restTime: integer(\"rest_time\"), // in seconds\n  order: integer(\"order\").notNull(),\n  instructions: text(\"instructions\"),\n  tips: text(\"tips\"),\n  videoUrl: varchar(\"video_url\"),\n});\n\n// User workout sessions\nexport const workoutSessions = pgTable(\"workout_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  workoutId: varchar(\"workout_id\").references(() => workouts.id).notNull(),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  status: varchar(\"status\", { length: 20 }).notNull(), // 'active', 'completed', 'cancelled'\n  totalDuration: integer(\"total_duration\"), // actual duration in seconds\n  caloriesBurned: integer(\"calories_burned\"),\n  averageHeartRate: integer(\"average_heart_rate\"),\n  maxHeartRate: integer(\"max_heart_rate\"),\n  notes: text(\"notes\"),\n});\n\n// Exercise performance within sessions\nexport const exercisePerformance = pgTable(\"exercise_performance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => workoutSessions.id).notNull(),\n  exerciseId: varchar(\"exercise_id\").references(() => exercises.id).notNull(),\n  setsCompleted: integer(\"sets_completed\"),\n  repsCompleted: integer(\"reps_completed\"),\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }), // in kg\n  duration: integer(\"duration\"), // actual duration in seconds\n  restTime: integer(\"rest_time\"), // actual rest time in seconds\n  heartRate: integer(\"heart_rate\"),\n  rating: integer(\"rating\"), // 1-10 difficulty rating\n  notes: text(\"notes\"),\n});\n\n// User achievements\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  iconUrl: varchar(\"icon_url\"),\n  category: varchar(\"category\", { length: 50 }), // 'streak', 'skill', 'milestone', 'challenge'\n  requirement: jsonb(\"requirement\"), // flexible requirements structure\n  points: integer(\"points\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievement unlocks\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  achievementId: varchar(\"achievement_id\").references(() => achievements.id).notNull(),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n  progress: jsonb(\"progress\"), // current progress towards achievement\n});\n\n// User profiles with training data\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  age: integer(\"age\"),\n  height: integer(\"height\"), // in cm\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }), // in kg\n  experience: varchar(\"experience\", { length: 20 }), // 'beginner', 'intermediate', 'advanced', 'pro'\n  goals: text(\"goals\"),\n  preferences: jsonb(\"preferences\"), // training preferences, time slots, etc.\n  currentStreak: integer(\"current_streak\").default(0),\n  longestStreak: integer(\"longest_streak\").default(0),\n  totalWorkouts: integer(\"total_workouts\").default(0),\n  totalPoints: integer(\"total_points\").default(0),\n  skillLevel: integer(\"skill_level\").default(1),\n  recoveryScore: decimal(\"recovery_score\", { precision: 3, scale: 1 }).default(sql`0.0`),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Wearable device connections\nexport const wearableDevices = pgTable(\"wearable_devices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  deviceType: deviceTypeEnum(\"device_type\").notNull(),\n  deviceName: varchar(\"device_name\", { length: 100 }),\n  deviceId: varchar(\"device_id\").unique(),\n  isConnected: boolean(\"is_connected\").default(true),\n  lastSync: timestamp(\"last_sync\"),\n  settings: jsonb(\"settings\"), // device-specific settings\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Biometric data from wearables\nexport const biometricData = pgTable(\"biometric_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  deviceId: varchar(\"device_id\").references(() => wearableDevices.id),\n  sessionId: varchar(\"session_id\").references(() => workoutSessions.id),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  heartRate: integer(\"heart_rate\"),\n  steps: integer(\"steps\"),\n  calories: integer(\"calories\"),\n  distance: decimal(\"distance\", { precision: 6, scale: 2 }), // in meters\n  hrv: decimal(\"hrv\", { precision: 5, scale: 2 }), // heart rate variability\n  sleepScore: decimal(\"sleep_score\", { precision: 3, scale: 1 }),\n  stressLevel: integer(\"stress_level\"), // 1-100\n  recoveryMetrics: jsonb(\"recovery_metrics\"),\n});\n\n// GOATA movement analysis\nexport const movementAnalysis = pgTable(\"movement_analysis\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  sessionId: varchar(\"session_id\").references(() => workoutSessions.id),\n  chainIntegration: decimal(\"chain_integration\", { precision: 3, scale: 1 }),\n  coreStability: decimal(\"core_stability\", { precision: 3, scale: 1 }),\n  hipFunction: decimal(\"hip_function\", { precision: 3, scale: 1 }),\n  shoulderStability: decimal(\"shoulder_stability\", { precision: 3, scale: 1 }),\n  overallScore: decimal(\"overall_score\", { precision: 3, scale: 1 }),\n  recommendations: text(\"recommendations\"),\n  analyzedAt: timestamp(\"analyzed_at\").defaultNow(),\n});\n\n// AI workout templates\nexport const aiWorkoutTemplates = pgTable(\"ai_workout_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  difficulty: difficultyEnum(\"difficulty\").notNull(),\n  workoutType: workoutTypeEnum(\"workout_type\").notNull(),\n  duration: integer(\"duration\"), // in minutes\n  targetMuscles: text(\"target_muscles\").array(),\n  equipment: text(\"equipment\").array(),\n  template: jsonb(\"template\"), // AI-generated workout structure\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Social features - friend connections\nexport const friendConnections = pgTable(\"friend_connections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  friendId: varchar(\"friend_id\").references(() => users.id).notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull(), // 'pending', 'accepted', 'blocked'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activity feed\nexport const activityFeed = pgTable(\"activity_feed\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  activityType: varchar(\"activity_type\", { length: 50 }).notNull(),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"), // flexible data for different activity types\n  points: integer(\"points\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Workout inbox for wearable data integration\nexport const workoutInbox = pgTable(\"workout_inbox\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  deviceId: varchar(\"device_id\").references(() => wearableDevices.id),\n  workoutData: jsonb(\"workout_data\").notNull(), // raw workout data from device\n  status: varchar(\"status\", { length: 20 }).notNull().default('pending'), // 'pending', 'categorized', 'ignored'\n  category: varchar(\"category\", { length: 50 }), // user-assigned category\n  workoutSessionId: varchar(\"workout_session_id\").references(() => workoutSessions.id), // linked session if categorized\n  autoDetectedType: varchar(\"auto_detected_type\", { length: 50 }), // AI-detected workout type\n  confidence: decimal(\"confidence\", { precision: 3, scale: 2 }), // AI confidence score\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  duration: integer(\"duration\"), // workout duration in minutes\n  caloriesBurned: integer(\"calories_burned\"),\n  averageHeartRate: integer(\"average_heart_rate\"),\n  maxHeartRate: integer(\"max_heart_rate\"),\n  aiSummary: text(\"ai_summary\"), // AI-generated workout summary\n  receivedAt: timestamp(\"received_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\n// Relations\nexport const fitnessPlansRelations = relations(fitnessPlans, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [fitnessPlans.createdBy],\n    references: [users.id],\n  }),\n  planWorkouts: many(planWorkouts),\n}));\n\nexport const planWorkoutsRelations = relations(planWorkouts, ({ one }) => ({\n  plan: one(fitnessPlans, {\n    fields: [planWorkouts.planId],\n    references: [fitnessPlans.id],\n  }),\n  workout: one(workouts, {\n    fields: [planWorkouts.workoutId],\n    references: [workouts.id],\n  }),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  profile: one(userProfiles),\n  workoutSessions: many(workoutSessions),\n  achievements: many(userAchievements),\n  wearableDevices: many(wearableDevices),\n  biometricData: many(biometricData),\n  activities: many(activityFeed),\n  workoutInboxItems: many(workoutInbox),\n  createdPlans: many(fitnessPlans),\n  createdWorkouts: many(workouts),\n}));\n\nexport const workoutInboxRelations = relations(workoutInbox, ({ one }) => ({\n  user: one(users, {\n    fields: [workoutInbox.userId],\n    references: [users.id],\n  }),\n  device: one(wearableDevices, {\n    fields: [workoutInbox.deviceId],\n    references: [wearableDevices.id],\n  }),\n  workoutSession: one(workoutSessions, {\n    fields: [workoutInbox.workoutSessionId],\n    references: [workoutSessions.id],\n  }),\n}));\n\nexport const workoutSessionsRelations = relations(workoutSessions, ({ one, many }) => ({\n  user: one(users, {\n    fields: [workoutSessions.userId],\n    references: [users.id],\n  }),\n  workout: one(workouts, {\n    fields: [workoutSessions.workoutId],\n    references: [workouts.id],\n  }),\n  exercisePerformances: many(exercisePerformance),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertWorkoutSchema = createInsertSchema(workouts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWorkoutSessionSchema = createInsertSchema(workoutSessions).omit({\n  id: true,\n  startedAt: true,\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertWorkoutInboxSchema = createInsertSchema(workoutInbox).omit({\n  id: true,\n  receivedAt: true,\n});\n\nexport const insertFitnessPlanSchema = createInsertSchema(fitnessPlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPlanWorkoutSchema = createInsertSchema(planWorkouts).omit({\n  id: true,\n});\n\nexport const insertExerciseSchema = createInsertSchema(exercises).omit({\n  id: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type FitnessPlan = typeof fitnessPlans.$inferSelect;\nexport type PlanWorkout = typeof planWorkouts.$inferSelect;\nexport type Workout = typeof workouts.$inferSelect;\nexport type Exercise = typeof exercises.$inferSelect;\nexport type WorkoutSession = typeof workoutSessions.$inferSelect;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type BiometricData = typeof biometricData.$inferSelect;\nexport type WorkoutInbox = typeof workoutInbox.$inferSelect;\nexport type InsertFitnessPlan = z.infer<typeof insertFitnessPlanSchema>;\nexport type InsertPlanWorkout = z.infer<typeof insertPlanWorkoutSchema>;\nexport type InsertWorkout = z.infer<typeof insertWorkoutSchema>;\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\nexport type InsertWorkoutSession = z.infer<typeof insertWorkoutSessionSchema>;\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type InsertWorkoutInbox = z.infer<typeof insertWorkoutInboxSchema>;\n","size_bytes":16932},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Workouts from \"@/pages/workouts\";\nimport WorkoutManagement from \"@/pages/workout-management\";\nimport FitnessPlans from \"@/pages/fitness-plans\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/workouts\" component={Workouts} />\n          <Route path=\"/workout-management\" component={WorkoutManagement} />\n          <Route path=\"/fitness-plans\" component={FitnessPlans} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\" storageKey=\"hoopmetrics-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1506},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  /* Basketball-themed color palette - Light Mode */\n  --background: 0 0% 100%;\n  --foreground: 222 84% 4.9%;\n  --border: 214.3 31.8% 91.4%;\n  --card: 0 0% 100%;\n  --card-foreground: 222 84% 4.9%;\n  --card-border: 214.3 31.8% 91.4%;\n  --sidebar: 0 0% 100%;\n  --sidebar-foreground: 222 84% 4.9%;\n  --sidebar-border: 214.3 31.8% 91.4%;\n  --sidebar-primary: 14 100% 60%;\n  --sidebar-primary-foreground: 210 40% 98%;\n  --sidebar-accent: 210 40% 96%;\n  --sidebar-accent-foreground: 222.2 84% 4.9%;\n  --sidebar-ring: 14 100% 60%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 222 84% 4.9%;\n  --popover-border: 214.3 31.8% 91.4%;\n  --primary: 14 100% 60%; /* Court Orange #FF6B35 */\n  --primary-foreground: 210 40% 98%;\n  --secondary: 210 40% 96%;\n  --secondary-foreground: 222.2 84% 4.9%;\n  --muted: 210 40% 96%;\n  --muted-foreground: 215.4 16.3% 46.9%;\n  --accent: 199 89% 48%; /* Electric Blue #0EA5E9 */\n  --accent-foreground: 210 40% 98%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 210 40% 98%;\n  --input: 214.3 31.8% 91.4%;\n  --ring: 14 100% 60%;\n  --chart-1: 14 100% 60%;\n  --chart-2: 199 89% 48%;\n  --chart-3: 142 71% 45%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 221 83% 53%;\n\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: .75rem; /* 12px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05), 0px 1px 2px -1px hsl(222 84% 4.9% / 0.1);\n  --shadow: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05), 0px 1px 2px -1px hsl(222 84% 4.9% / 0.1);\n  --shadow-md: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05), 0px 2px 4px -1px hsl(222 84% 4.9% / 0.1);\n  --shadow-lg: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05), 0px 4px 6px -1px hsl(222 84% 4.9% / 0.1);\n  --shadow-xl: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05), 0px 8px 10px -1px hsl(222 84% 4.9% / 0.1);\n  --shadow-2xl: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  /* Basketball-themed color palette - Dark Mode */\n  --background: 222 84% 4.9%; /* Deep Navy */\n  --foreground: 210 40% 98%;\n  --border: 217 32.6% 17.5%;\n  --card: 222 84% 4.9%;\n  --card-foreground: 210 40% 98%;\n  --card-border: 217 32.6% 17.5%;\n  --sidebar: 222 84% 4.9%;\n  --sidebar-foreground: 210 40% 98%;\n  --sidebar-border: 217 32.6% 17.5%;\n  --sidebar-primary: 14 100% 60%;\n  --sidebar-primary-foreground: 222 84% 4.9%;\n  --sidebar-accent: 217 32.6% 17.5%;\n  --sidebar-accent-foreground: 210 40% 98%;\n  --sidebar-ring: 14 100% 60%;\n  --popover: 222 84% 4.9%;\n  --popover-foreground: 210 40% 98%;\n  --popover-border: 217 32.6% 17.5%;\n  --primary: 14 100% 60%; /* Court Orange #FF6B35 */\n  --primary-foreground: 222 84% 4.9%;\n  --secondary: 217 32.6% 17.5%;\n  --secondary-foreground: 210 40% 98%;\n  --muted: 217 32.6% 17.5%;\n  --muted-foreground: 215 20.2% 65.1%;\n  --accent: 199 89% 48%; /* Electric Blue #0EA5E9 */\n  --accent-foreground: 210 40% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 210 40% 98%;\n  --input: 217 32.6% 17.5%;\n  --ring: 14 100% 60%;\n  --chart-1: 14 100% 60%;\n  --chart-2: 199 89% 48%;\n  --chart-3: 142 71% 45%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 221 83% 53%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00), 0px 1px 2px -1px hsl(222 84% 4.9% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00), 0px 1px 2px -1px hsl(222 84% 4.9% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00), 0px 2px 4px -1px hsl(222 84% 4.9% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00), 0px 4px 6px -1px hsl(222 84% 4.9% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00), 0px 8px 10px -1px hsl(222 84% 4.9% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(222 84% 4.9% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Basketball-specific styling classes */\n.glass {\n  background: rgba(255, 255, 255, 0.08);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(255, 255, 255, 0.12);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.dark .glass {\n  background: rgba(255, 255, 255, 0.05);\n  border: 1px solid rgba(255, 255, 255, 0.08);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n}\n\n.gradient-orange {\n  background: linear-gradient(135deg, #FF6B35 0%, #FF8C42 50%, #E55A2B 100%);\n  box-shadow: 0 4px 20px rgba(255, 107, 53, 0.3);\n}\n\n.gradient-blue {\n  background: linear-gradient(135deg, #0EA5E9 0%, #38BDF8 50%, #0284C7 100%);\n  box-shadow: 0 4px 20px rgba(14, 165, 233, 0.3);\n}\n\n.gradient-navy {\n  background: linear-gradient(135deg, #1E3A8A 0%, #3B82F6 50%, #1E2B70 100%);\n  box-shadow: 0 4px 20px rgba(30, 58, 138, 0.3);\n}\n\n.gradient-court {\n  background: linear-gradient(135deg, #FF6B35 0%, #0EA5E9 100%);\n  box-shadow: 0 4px 20px rgba(255, 107, 53, 0.2);\n}\n\n.court-pattern {\n  background-image: \n    radial-gradient(circle at 25% 25%, rgba(255, 107, 53, 0.15) 0%, transparent 60%),\n    radial-gradient(circle at 75% 75%, rgba(14, 165, 233, 0.15) 0%, transparent 60%),\n    linear-gradient(45deg, transparent 40%, rgba(255, 107, 53, 0.03) 50%, transparent 60%);\n}\n\n.basketball-mesh {\n  background-image: \n    repeating-linear-gradient(45deg, transparent, transparent 2px, rgba(255, 107, 53, 0.05) 2px, rgba(255, 107, 53, 0.05) 4px),\n    repeating-linear-gradient(-45deg, transparent, transparent 2px, rgba(14, 165, 233, 0.05) 2px, rgba(14, 165, 233, 0.05) 4px);\n}\n\n.hoop-glow {\n  box-shadow: \n    0 0 20px rgba(255, 107, 53, 0.4),\n    0 0 40px rgba(255, 107, 53, 0.2),\n    inset 0 0 20px rgba(255, 107, 53, 0.1);\n}\n\n/* Advanced Animation keyframes */\n@keyframes pulse-glow {\n  0%, 100% { \n    box-shadow: 0 0 5px rgb(255 107 53 / 0.5); \n  }\n  50% { \n    box-shadow: 0 0 25px rgb(255 107 53 / 0.8), 0 0 35px rgb(255 107 53 / 0.4); \n  }\n}\n\n@keyframes slide-up {\n  0% { \n    transform: translateY(20px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n@keyframes slide-in-left {\n  0% { \n    transform: translateX(-30px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateX(0); \n    opacity: 1; \n  }\n}\n\n@keyframes slide-in-right {\n  0% { \n    transform: translateX(30px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateX(0); \n    opacity: 1; \n  }\n}\n\n@keyframes bounce-subtle {\n  0%, 100% { \n    transform: translateY(0); \n  }\n  50% { \n    transform: translateY(-3px); \n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-12px); \n  }\n}\n\n@keyframes rotate-basketball {\n  0% { \n    transform: rotate(0deg); \n  }\n  100% { \n    transform: rotate(360deg); \n  }\n}\n\n@keyframes scale-bounce {\n  0%, 100% { \n    transform: scale(1); \n  }\n  50% { \n    transform: scale(1.05); \n  }\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s infinite;\n}\n\n.animate-slide-up {\n  animation: slide-up 0.4s ease-out;\n}\n\n.animate-slide-in-left {\n  animation: slide-in-left 0.5s ease-out;\n}\n\n.animate-slide-in-right {\n  animation: slide-in-right 0.5s ease-out;\n}\n\n.animate-bounce-subtle {\n  animation: bounce-subtle 2s infinite;\n}\n\n.animate-rotate-basketball {\n  animation: rotate-basketball 4s linear infinite;\n}\n\n.animate-scale-bounce {\n  animation: scale-bounce 1s ease-in-out infinite;\n}\n\n.float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.metric-card {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  transform-origin: center;\n}\n\n.metric-card:hover {\n  transform: translateY(-4px) scale(1.02);\n  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);\n}\n\n.stagger-1 { animation-delay: 0.1s; }\n.stagger-2 { animation-delay: 0.2s; }\n.stagger-3 { animation-delay: 0.3s; }\n.stagger-4 { animation-delay: 0.4s; }\n.stagger-5 { animation-delay: 0.5s; }\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n","size_bytes":14152},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiTrainer.ts":{"content":"import Anthropic from '@anthropic-ai/sdk';\nimport type { UserProfile, WorkoutSession } from '@shared/schema';\n\n/*\nThe newest Anthropic model is \"claude-sonnet-4-20250514\", not \"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-20241022\" nor \"claude-3-sonnet-20240229\". \nIf the user doesn't specify a model, always prefer using \"claude-sonnet-4-20250514\" as it is the latest model.\n*/\n\n// <important_do_not_delete>\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\n// </important_do_not_delete>\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\ninterface WorkoutGenerationRequest {\n  userProfile?: UserProfile;\n  userStats?: any;\n  preferences?: {\n    duration?: number;\n    intensity?: string;\n    focusArea?: string;\n    equipment?: string[];\n  };\n}\n\ninterface FitnessPlanGenerationRequest {\n  userProfile?: UserProfile;\n  userStats?: any;\n  preferences?: {\n    planType?: string; // 'GOATA', 'Soviet', 'NBA', 'Hypertrophy', etc.\n    duration?: number; // weeks\n    workoutsPerWeek?: number;\n    focusArea?: string;\n    methodology?: string;\n  };\n}\n\ninterface ExerciseGenerationRequest {\n  workoutType?: string;\n  focusArea?: string;\n  difficulty?: string;\n  equipment?: string[];\n}\n\ninterface InsightGenerationRequest {\n  recentSessions?: WorkoutSession[];\n  userProfile?: UserProfile;\n}\n\nclass AITrainerService {\n  // Generate a complete fitness plan (top level)\n  async generateFitnessPlan(request: FitnessPlanGenerationRequest) {\n    const { userProfile, userStats, preferences } = request;\n    \n    const prompt = this.buildFitnessPlanPrompt(userProfile, userStats, preferences);\n\n    try {\n      const response = await anthropic.messages.create({\n        // \"claude-sonnet-4-20250514\"\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 3000,\n        system: `You are a versatile fitness AI specializing in creating structured training plans across various methodologies. You understand different approaches including GOATA movement, Soviet training systems, NBA protocols, hypertrophy training, and general fitness methodologies.\n\nYour fitness plans should:\n1. Adapt to the requested methodology while being flexible\n2. Be properly periodized with logical progression\n3. Include detailed workout structure for each week/day\n4. Consider the user's experience level and goals\n5. Balance work and recovery appropriately\n6. Be adaptable for different sports and activities\n\nAlways respond with a JSON object containing the complete plan structure with workouts organized by weeks and days.`,\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n      });\n\n      const planData = JSON.parse((response.content[0] as any).text);\n      \n      return {\n        ...planData,\n        aiGenerated: true,\n        generatedAt: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error generating AI fitness plan:', error);\n      // Return a fallback plan structure when API fails\n      return this.getFallbackFitnessPlan(request);\n    }\n  }\n  async generatePersonalizedWorkout(request: WorkoutGenerationRequest) {\n    const { userProfile, userStats, preferences } = request;\n    \n    const prompt = this.buildWorkoutPrompt(userProfile, userStats, preferences);\n\n    try {\n      const response = await anthropic.messages.create({\n        // \"claude-sonnet-4-20250514\"\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 2000,\n        system: `You are a versatile fitness AI coach specializing in personalized workout generation. You understand various training methodologies and can adapt workouts for different sports and activities based on user preferences.\n\nYour workouts should:\n1. Be functional and appropriate for the user's goals\n2. Consider the user's experience level and recovery status\n3. Include proper warm-up, main work, and cool-down phases\n4. Incorporate relevant movement principles based on the methodology\n5. Be progressive and challenging but safe\n6. Include specific coaching cues and form tips\n\nAlways respond with a JSON object containing the workout structure.`,\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n      });\n\n      const workoutData = JSON.parse((response.content[0] as any).text);\n      \n      return {\n        ...workoutData,\n        aiGenerated: true,\n        generatedAt: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error generating AI workout:', error);\n      // Return a fallback workout when API fails\n      return this.getFallbackWorkout(request);\n    }\n  }\n\n  async generateInsights(request: InsightGenerationRequest) {\n    const { recentSessions, userProfile } = request;\n    \n    const prompt = this.buildInsightPrompt(recentSessions, userProfile);\n\n    try {\n      const response = await anthropic.messages.create({\n        // \"claude-sonnet-4-20250514\"\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 1500,\n        system: `You are an AI basketball training analyst. Analyze user workout data and provide actionable insights about their training patterns, progress, and areas for improvement. Focus on:\n\n1. Performance trends and patterns\n2. Recovery recommendations\n3. Skill development priorities\n4. Training load optimization\n5. Motivation and goal-setting advice\n\nBe encouraging but realistic, and always provide specific, actionable recommendations.`,\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n      });\n\n      const insightData = JSON.parse((response.content[0] as any).text);\n      \n      return {\n        ...insightData,\n        generatedAt: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error generating insights:', error);\n      throw new Error('Failed to generate workout insights');\n    }\n  }\n\n  // Generate exercises for a workout (bottom level)\n  async generateExercises(request: ExerciseGenerationRequest) {\n    const { workoutType, focusArea, difficulty, equipment } = request;\n    \n    const prompt = this.buildExercisePrompt(workoutType, focusArea, difficulty, equipment);\n\n    try {\n      const response = await anthropic.messages.create({\n        // \"claude-sonnet-4-20250514\"\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 2000,\n        system: `You are an expert exercise prescription AI specializing in basketball training. Generate specific, detailed exercises with clear instructions, rep ranges, sets, and coaching cues.\n\nYour exercises should:\n1. Be specific to the workout type and focus area\n2. Include clear setup and execution instructions\n3. Provide progression and regression options\n4. Include coaching cues for proper form\n5. Consider available equipment\n6. Be basketball-specific when appropriate\n\nAlways respond with a JSON array of exercise objects.`,\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n      });\n\n      const exerciseData = JSON.parse((response.content[0] as any).text);\n      \n      return {\n        exercises: exerciseData,\n        aiGenerated: true,\n        generatedAt: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error generating AI exercises:', error);\n      throw new Error('Failed to generate exercises');\n    }\n  }\n\n  private buildFitnessPlanPrompt(userProfile?: UserProfile, userStats?: any, preferences?: any): string {\n    let prompt = `Generate a comprehensive ${preferences?.methodology || 'general fitness'} training plan.\\n\\n`;\n    \n    if (userProfile) {\n      prompt += `User Profile:\n- Experience: ${userProfile.experience || 'beginner'}\n- Age: ${userProfile.age || 'not specified'}\n- Goals: ${userProfile.goals || 'improve basketball performance'}\n- Current fitness level: ${userProfile.skillLevel || 1}/10\\n\\n`;\n    }\n    \n    if (preferences) {\n      prompt += `Plan Requirements:\n- Plan Type: ${preferences.planType || 'basketball training'}\n- Duration: ${preferences.duration || 8} weeks\n- Workouts per week: ${preferences.workoutsPerWeek || 4}\n- Focus Area: ${preferences.focusArea || 'overall fitness and performance'}\n- Methodology: ${preferences.methodology || 'functional training'}\\n\\n`;\n    }\n    \n    prompt += `Please structure the plan with:\n1. Overall plan details (name, description, methodology)\n2. Weekly breakdown with specific workouts\n3. Progressive difficulty throughout the weeks\n4. Recovery and deload periods\n5. Clear workout naming and categorization\n\nReturn as JSON with the following structure:\n{\n  \"name\": \"Plan Name\",\n  \"description\": \"Plan description\",\n  \"methodology\": \"Training methodology\",\n  \"planType\": \"${preferences?.planType || 'fitness'}\",\n  \"difficulty\": \"intermediate\",\n  \"duration\": 8,\n  \"workoutsPerWeek\": 4,\n  \"weeks\": [\n    {\n      \"week\": 1,\n      \"focus\": \"Foundation\",\n      \"workouts\": [\n        {\n          \"day\": 1,\n          \"name\": \"Workout Name\",\n          \"description\": \"Brief description\",\n          \"workoutType\": \"strength\",\n          \"duration\": 60\n        }\n      ]\n    }\n  ]\n}`;\n    \n    return prompt;\n  }\n\n  private buildExercisePrompt(workoutType?: string, focusArea?: string, difficulty?: string, equipment?: string[]): string {\n    let prompt = `Generate specific exercises for a ${workoutType || 'fitness'} workout.\\n\\n`;\n    \n    prompt += `Requirements:\n- Workout Type: ${workoutType || 'fitness training'}\n- Focus Area: ${focusArea || 'overall performance'}\n- Difficulty: ${difficulty || 'intermediate'}\n- Available Equipment: ${equipment?.join(', ') || 'basic gym equipment'}\\n\\n`;\n    \n    prompt += `Generate 6-10 exercises with the following JSON structure:\n[\n  {\n    \"name\": \"Exercise Name\",\n    \"description\": \"Brief description\",\n    \"sets\": 3,\n    \"reps\": 12,\n    \"duration\": null,\n    \"restTime\": 60,\n    \"instructions\": \"Detailed step-by-step instructions\",\n    \"tips\": \"Key coaching cues and form tips\",\n    \"order\": 1\n  }\n]`;\n    \n    return prompt;\n  }\n\n  private buildWorkoutPrompt(userProfile?: UserProfile, userStats?: any, preferences?: any): string {\n    return `Generate a personalized workout based on the following user data:\n\nUser Profile:\n- Experience Level: ${userProfile?.experience || 'intermediate'}\n- Age: ${userProfile?.age || 'not specified'}\n- Current Streak: ${userProfile?.currentStreak || 0} days\n- Total Workouts: ${userProfile?.totalWorkouts || 0}\n- Skill Level: ${userProfile?.skillLevel || 1}\n- Recovery Score: ${userProfile?.recoveryScore || 75}%\n\nCurrent Stats:\n- Total Points: ${userStats?.totalPoints || 0}\n- Average Heart Rate: ${userStats?.averageHeartRate || 'not available'} BPM\n- Recovery Score: ${userStats?.recoveryScore || 75}%\n\nWorkout Preferences:\n- Desired Duration: ${preferences?.duration || 45} minutes\n- Intensity Level: ${preferences?.intensity || 'moderate'}\n- Focus Area: ${preferences?.focusArea || 'overall skills'}\n- Available Equipment: ${preferences?.equipment?.join(', ') || 'basic gym equipment'}\n\nPlease generate a detailed workout plan in the following JSON format:\n{\n  \"name\": \"Workout Name\",\n  \"description\": \"Brief description of the workout\",\n  \"duration\": 45,\n  \"difficulty\": \"intermediate\",\n  \"workoutType\": \"skills\",\n  \"intensityLevel\": 8,\n  \"expectedHRZone\": \"Zone 4-5\",\n  \"phases\": [\n    {\n      \"name\": \"Dynamic Warm-up\",\n      \"duration\": 8,\n      \"description\": \"GOATA movement prep\",\n      \"exercises\": [\n        {\n          \"name\": \"Exercise name\",\n          \"duration\": 2,\n          \"instructions\": \"Detailed instructions\",\n          \"tips\": \"Coaching tips\"\n        }\n      ]\n    }\n  ],\n  \"coachingNotes\": \"Overall coaching advice and tips\",\n  \"goataFocus\": \"Specific GOATA methodology focus areas\"\n}`;\n  }\n\n  private buildInsightPrompt(recentSessions?: WorkoutSession[], userProfile?: UserProfile): string {\n    const sessionsData = recentSessions?.map(session => ({\n      completedAt: session.completedAt,\n      duration: session.totalDuration,\n      status: session.status,\n      heartRate: session.averageHeartRate,\n      calories: session.caloriesBurned,\n    })) || [];\n\n    return `Analyze this user's recent training data and provide personalized insights:\n\nUser Profile:\n- Experience: ${userProfile?.experience || 'intermediate'}\n- Current Streak: ${userProfile?.currentStreak || 0} days\n- Total Workouts: ${userProfile?.totalWorkouts || 0}\n- Skill Level: ${userProfile?.skillLevel || 1}\n- Recovery Score: ${userProfile?.recoveryScore || 75}%\n\nRecent Workout Sessions:\n${JSON.stringify(sessionsData, null, 2)}\n\nPlease provide insights in the following JSON format:\n{\n  \"overallProgress\": \"Assessment of overall progress\",\n  \"trainingConsistency\": \"Analysis of training consistency\",\n  \"performanceTrends\": [\n    {\n      \"metric\": \"Heart Rate\",\n      \"trend\": \"improving\",\n      \"insight\": \"Detailed insight about this metric\"\n    }\n  ],\n  \"recommendations\": [\n    {\n      \"category\": \"Training\",\n      \"priority\": \"high\",\n      \"recommendation\": \"Specific actionable advice\"\n    }\n  ],\n  \"nextWeekFocus\": \"What to focus on in the coming week\",\n  \"motivationalNote\": \"Encouraging message based on their progress\"\n}`;\n  }\n\n  // Fallback methods for when AI API is unavailable\n  private getFallbackFitnessPlan(request: FitnessPlanGenerationRequest) {\n    const { preferences } = request;\n    const methodology = preferences?.methodology || 'General';\n    \n    return {\n      name: `${methodology} Training Plan`,\n      description: `A structured ${methodology.toLowerCase()} training plan focusing on progressive development and sustainable results.`,\n      methodology: methodology,\n      planType: preferences?.planType || 'fitness',\n      difficulty: 'intermediate',\n      duration: preferences?.duration || 8,\n      workoutsPerWeek: preferences?.workoutsPerWeek || 4,\n      aiGenerated: true,\n      generatedAt: new Date().toISOString(),\n      isTemplate: true,\n      weeks: this.generateFallbackWeeks(preferences?.duration || 8, methodology)\n    };\n  }\n\n  private getFallbackWorkout(request: WorkoutGenerationRequest) {\n    const { preferences } = request;\n    \n    return {\n      name: 'Dynamic Training Session',\n      description: 'A well-rounded workout focusing on movement quality and progressive development.',\n      duration: preferences?.duration || 45,\n      difficulty: preferences?.intensity || 'moderate',\n      workoutType: 'mixed',\n      intensityLevel: 7,\n      expectedHRZone: 'Zone 3-4',\n      phases: [\n        {\n          name: 'Dynamic Warm-up',\n          duration: 8,\n          description: 'Movement preparation and activation',\n          exercises: [\n            {\n              name: 'Dynamic Joint Mobility',\n              duration: 3,\n              instructions: 'Move through full range of motion for major joints',\n              tips: 'Focus on smooth, controlled movements'\n            },\n            {\n              name: 'Movement Activation',\n              duration: 5,\n              instructions: 'Activate key movement patterns and muscle groups',\n              tips: 'Quality over quantity - focus on proper form'\n            }\n          ]\n        },\n        {\n          name: 'Main Work',\n          duration: 30,\n          description: 'Primary training focus',\n          exercises: [\n            {\n              name: 'Functional Movement Pattern 1',\n              duration: 10,\n              instructions: 'Perform movement patterns relevant to your goals',\n              tips: 'Maintain proper form throughout'\n            },\n            {\n              name: 'Functional Movement Pattern 2',\n              duration: 10,\n              instructions: 'Continue with complementary movement patterns',\n              tips: 'Focus on quality and progression'\n            },\n            {\n              name: 'Integration Work',\n              duration: 10,\n              instructions: 'Combine movements for functional strength',\n              tips: 'Challenge stability and coordination'\n            }\n          ]\n        },\n        {\n          name: 'Cool Down',\n          duration: 7,\n          description: 'Recovery and mobility work',\n          exercises: [\n            {\n              name: 'Gentle Stretching',\n              duration: 4,\n              instructions: 'Target areas worked during the session',\n              tips: 'Hold stretches for 30-60 seconds'\n            },\n            {\n              name: 'Relaxation',\n              duration: 3,\n              instructions: 'Deep breathing and final relaxation',\n              tips: 'Focus on recovery and mindfulness'\n            }\n          ]\n        }\n      ],\n      coachingNotes: 'Focus on movement quality, listen to your body, and progress at your own pace.',\n      aiGenerated: true,\n      generatedAt: new Date().toISOString(),\n      isTemplate: true\n    };\n  }\n\n  private generateFallbackWeeks(duration: number, methodology: string) {\n    const weeks = [];\n    for (let week = 1; week <= duration; week++) {\n      const phase = week <= duration / 3 ? 'Foundation' : \n                   week <= (2 * duration) / 3 ? 'Development' : 'Integration';\n      \n      weeks.push({\n        week,\n        focus: phase,\n        workouts: [\n          {\n            day: 1,\n            name: `${methodology} Session A`,\n            description: `Week ${week} - ${phase} phase primary session`,\n            workoutType: 'strength',\n            duration: 60\n          },\n          {\n            day: 3,\n            name: `${methodology} Session B`,\n            description: `Week ${week} - ${phase} phase secondary session`,\n            workoutType: 'conditioning',\n            duration: 45\n          },\n          {\n            day: 5,\n            name: `${methodology} Session C`,\n            description: `Week ${week} - ${phase} phase skill session`,\n            workoutType: 'skills',\n            duration: 50\n          }\n        ]\n      });\n    }\n    return weeks;\n  }\n}\n\nexport const aiTrainerService = new AITrainerService();\n","size_bytes":17929},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":302},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport HeroSection from \"@/components/dashboard/hero-section\";\nimport PerformanceMetrics from \"@/components/dashboard/performance-metrics\";\nimport AIWorkoutGenerator from \"@/components/dashboard/ai-workout-generator\";\nimport WorkoutInbox from \"@/components/dashboard/workout-inbox\";\nimport SocialFeatures from \"@/components/dashboard/social-features\";\nimport Achievements from \"@/components/dashboard/achievements\";\nimport TrainingAnalytics from \"@/components/dashboard/training-analytics\";\nimport FloatingAIHelper from \"@/components/ai-helper/floating-ai-helper\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 bg-primary rounded-full animate-pulse mb-4 mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background court-pattern\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8 space-y-8\">\n        <div className=\"animate-slide-up\">\n          <HeroSection />\n        </div>\n        <div className=\"animate-slide-up stagger-1\">\n          <PerformanceMetrics />\n        </div>\n        <div className=\"animate-slide-up stagger-2\">\n          <AIWorkoutGenerator />\n        </div>\n        \n        {/* Workout Management Link */}\n        <div className=\"animate-slide-up stagger-2-5\">\n          <Card className=\"glass rounded-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Workout Management</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Schedule workouts, review wearable data, and manage your training history\n                  </p>\n                </div>\n                <Button\n                  onClick={() => window.location.href = '/workout-management'}\n                  className=\"gradient-court\"\n                  data-testid=\"button-workout-management\"\n                >\n                  <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"/>\n                  </svg>\n                  Manage Workouts\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <div className=\"animate-slide-up stagger-3\">\n          <WorkoutInbox />\n        </div>\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          <div className=\"animate-slide-in-left stagger-4\">\n            <SocialFeatures />\n          </div>\n          <div className=\"animate-slide-in-right stagger-4\">\n            <Achievements />\n          </div>\n        </div>\n        <div className=\"animate-slide-up stagger-5\">\n          <TrainingAnalytics />\n        </div>\n      </main>\n\n      {/* AI Helper Assistant */}\n      <FloatingAIHelper />\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":4129},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-navy-900/20 court-pattern\">\n      {/* Header */}\n      <header className=\"w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-lg font-bold text-primary-foreground\">H</span>\n            </div>\n            <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              HoopMetrics\n            </h1>\n          </div>\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            className=\"gradient-orange\"\n            data-testid=\"button-login\"\n          >\n            Get Started\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Hero Content */}\n          <div className=\"text-center mb-16\">\n            <Badge className=\"mb-4 gradient-blue text-white border-0\">\n              AI-Powered Training Platform\n            </Badge>\n            <h1 className=\"text-5xl lg:text-7xl font-bold mb-6\">\n              Elevate Your\n              <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent block\">\n                Basketball Game\n              </span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto mb-8\">\n              Train smarter with AI-powered workouts, real-time performance tracking, and personalized coaching. \n              Connect with the basketball community and dominate the court.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                className=\"gradient-orange text-lg px-8 py-4\"\n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-start-training\"\n              >\n                Start Training Free\n              </Button>\n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"text-lg px-8 py-4 border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n                data-testid=\"button-learn-more\"\n              >\n                Learn More\n              </Button>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n            <Card className=\"glass border-border/50 hover:border-primary/50 transition-colors metric-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mb-4\">\n                  <svg className=\"w-6 h-6 text-primary\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"/>\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">AI Personal Trainer</h3>\n                <p className=\"text-muted-foreground\">\n                  Get personalized workouts powered by Claude AI, tailored to your skill level and goals.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-border/50 hover:border-accent/50 transition-colors metric-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center mb-4\">\n                  <svg className=\"w-6 h-6 text-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\"/>\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Real-time Analytics</h3>\n                <p className=\"text-muted-foreground\">\n                  Track your heart rate, performance metrics, and progress with wearable device integration.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-border/50 hover:border-green-500/50 transition-colors metric-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center mb-4\">\n                  <svg className=\"w-6 h-6 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"/>\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Social Community</h3>\n                <p className=\"text-muted-foreground\">\n                  Compete with friends, join leaderboards, and share your basketball journey.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Stats Section */}\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold mb-8\">Join Thousands of Athletes</h2>\n            <div className=\"grid md:grid-cols-4 gap-8\">\n              <div>\n                <div className=\"text-4xl font-bold text-primary mb-2\">10K+</div>\n                <div className=\"text-muted-foreground\">Active Users</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-accent mb-2\">50K+</div>\n                <div className=\"text-muted-foreground\">Workouts Completed</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-green-500 mb-2\">95%</div>\n                <div className=\"text-muted-foreground\">Improvement Rate</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold text-orange-500 mb-2\">4.9★</div>\n                <div className=\"text-muted-foreground\">User Rating</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7083},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/workouts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Header from \"@/components/layout/header\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\n\nexport default function Workouts() {\n  const { data: workouts, isLoading } = useQuery({\n    queryKey: [\"/api/workouts\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Workouts</h1>\n            <p className=\"text-muted-foreground\">Choose from our collection of basketball-focused workouts</p>\n          </div>\n          <Button className=\"gradient-orange\" data-testid=\"button-create-workout\">\n            Create Workout\n          </Button>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"glass\">\n                <CardHeader>\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-20 w-full mb-4\" />\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-4 w-16\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {workouts?.map((workout: any) => (\n              <Card key={workout.id} className=\"glass hover:border-primary/50 transition-colors\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{workout.name}</CardTitle>\n                    <Badge \n                      variant={workout.aiGenerated ? \"default\" : \"secondary\"}\n                      className={workout.aiGenerated ? \"gradient-blue border-0\" : \"\"}\n                    >\n                      {workout.aiGenerated ? \"AI\" : workout.difficulty}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground mb-4 line-clamp-2\">\n                    {workout.description}\n                  </p>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {workout.duration} min\n                    </span>\n                    <Badge variant=\"outline\">\n                      {workout.workoutType}\n                    </Badge>\n                  </div>\n                  <Button \n                    className=\"w-full gradient-orange\"\n                    data-testid={`button-start-workout-${workout.id}`}\n                  >\n                    Start Workout\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {!isLoading && (!workouts || workouts.length === 0) && (\n          <Card className=\"glass text-center py-16\">\n            <CardContent>\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <svg className=\"w-8 h-8 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"/>\n                </svg>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">No workouts available</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Get started by creating your first workout or generating one with AI\n              </p>\n              <Button className=\"gradient-orange\" data-testid=\"button-generate-ai-workout\">\n                Generate AI Workout\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":4470},"client/src/components/dashboard/achievements.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Achievements() {\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"mb-12\">\n        <Card className=\"glass\">\n          <CardHeader>\n            <Skeleton className=\"h-6 w-64\" />\n            <Skeleton className=\"h-4 w-32\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"bg-secondary/10 rounded-lg p-4\">\n                  <Skeleton className=\"h-4 w-24 mb-2\" />\n                  <Skeleton className=\"h-3 w-32 mb-4\" />\n                  <Skeleton className=\"h-2 w-full mb-2\" />\n                  <Skeleton className=\"h-3 w-16\" />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </section>\n    );\n  }\n\n  const achievements = dashboardData?.achievements || [];\n  const unlockedCount = achievements.filter((a: any) => a.isUnlocked).length;\n  const totalAchievements = 25; // Mock total\n\n  return (\n    <section className=\"mb-12\">\n      <Card className=\"glass rounded-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl\">Achievements & Progress</CardTitle>\n            <div className=\"text-sm text-muted-foreground\">\n              <span data-testid=\"achievements-unlocked\">{unlockedCount}</span> of{' '}\n              <span data-testid=\"achievements-total\">{totalAchievements}</span> unlocked\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Mock Achievement Cards */}\n            \n            {/* Achievement Card - Unlocked */}\n            <div className=\"bg-gradient-to-br from-primary/20 to-orange-500/10 rounded-lg p-4 border border-primary/30 relative overflow-hidden\">\n              <div className=\"absolute top-2 right-2\">\n                <span className=\"text-2xl animate-bounce-subtle\">🏆</span>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Streak Master</h4>\n                <p className=\"text-xs text-muted-foreground\">Complete 15 consecutive workouts</p>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={100} className=\"flex-1 h-2\" />\n                  <span className=\"text-xs font-medium text-primary\">15/15</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Achievement Card - In Progress */}\n            <div className=\"bg-secondary/30 rounded-lg p-4 border border-border relative\">\n              <div className=\"absolute top-2 right-2 opacity-50\">\n                <span className=\"text-2xl\">⭐</span>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Skills Specialist</h4>\n                <p className=\"text-xs text-muted-foreground\">Master 5 different skill categories</p>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={60} className=\"flex-1 h-2\" />\n                  <span className=\"text-xs font-medium\">3/5</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Achievement Card - Locked */}\n            <div className=\"bg-secondary/10 rounded-lg p-4 border border-border/50 relative opacity-50\">\n              <div className=\"absolute top-2 right-2\">\n                <span className=\"text-2xl\">🔒</span>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Elite Athlete</h4>\n                <p className=\"text-xs text-muted-foreground\">Reach Pro level in all categories</p>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={25} className=\"flex-1 h-2\" />\n                  <span className=\"text-xs font-medium\">1/4</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Challenge Card */}\n            <div className=\"bg-gradient-to-br from-accent/20 to-blue-500/10 rounded-lg p-4 border border-accent/30 relative\">\n              <div className=\"absolute top-2 right-2\">\n                <span className=\"text-2xl animate-pulse\">⚡</span>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Weekly Challenge</h4>\n                <p className=\"text-xs text-muted-foreground\">Score 100+ in accuracy drills</p>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={87} className=\"flex-1 h-2\" />\n                  <span className=\"text-xs font-medium text-accent\">87/100</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Render actual achievements if available */}\n            {achievements.map((achievement: any) => (\n              <div \n                key={achievement.id}\n                className={`rounded-lg p-4 border relative ${\n                  achievement.isUnlocked \n                    ? 'bg-gradient-to-br from-primary/20 to-orange-500/10 border-primary/30'\n                    : 'bg-secondary/10 border-border/50 opacity-50'\n                }`}\n              >\n                <div className=\"absolute top-2 right-2\">\n                  <span className=\"text-2xl\">\n                    {achievement.isUnlocked ? '🏆' : '🔒'}\n                  </span>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-sm\">{achievement.name}</h4>\n                  <p className=\"text-xs text-muted-foreground\">{achievement.description}</p>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress \n                      value={achievement.isUnlocked ? 100 : (achievement.progress || 0)} \n                      className=\"flex-1 h-2\" \n                    />\n                    <span className={`text-xs font-medium ${\n                      achievement.isUnlocked ? 'text-primary' : 'text-muted-foreground'\n                    }`}>\n                      {achievement.isUnlocked ? 'Complete' : 'In Progress'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":6862},"client/src/components/dashboard/ai-workout-generator.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AIWorkoutGenerator() {\n  const [generatedWorkout, setGeneratedWorkout] = useState<any>(null);\n  const { toast } = useToast();\n\n  const generateWorkoutMutation = useMutation({\n    mutationFn: async (preferences: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate-workout\", { preferences });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedWorkout(data);\n      toast({\n        title: \"Workout Generated!\",\n        description: \"Your personalized AI workout is ready.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate AI workout. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <section className=\"mb-12\">\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2\">\n          <Card className=\"glass rounded-xl\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-xl\">AI Workout Assistant</CardTitle>\n                <div className=\"flex items-center space-x-2 text-sm text-accent\">\n                  <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                  <span>Fill gaps in your training</span>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {!generatedWorkout ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <svg className=\"w-8 h-8 text-primary\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"/>\n                    </svg>\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Need Additional Training?</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    AI can help fill gaps in your training plan when wearable data doesn't cover everything\n                  </p>\n                  <Button \n                    onClick={() => generateWorkoutMutation.mutate({})}\n                    disabled={generateWorkoutMutation.isPending}\n                    className=\"gradient-orange\"\n                    data-testid=\"button-generate-workout\"\n                  >\n                    {generateWorkoutMutation.isPending ? \"Generating...\" : \"Generate Supplemental Workout\"}\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Workout Session Card */}\n                  <div className=\"bg-secondary/50 rounded-lg p-4 border border-border\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-semibold text-lg\" data-testid=\"workout-name\">\n                          {generatedWorkout.name || \"Elite Ball Handling Circuit\"}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {generatedWorkout.description || \"Personalized based on your skill level and GOATA movement patterns\"}\n                        </p>\n                      </div>\n                      <Badge className=\"bg-primary text-primary-foreground\">\n                        {generatedWorkout.duration || 45} min\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Intensity Level</span>\n                          <span className=\"font-medium\">{generatedWorkout.intensityLevel || 8}/10</span>\n                        </div>\n                        <Progress value={(generatedWorkout.intensityLevel || 8) * 10} className=\"h-2\" />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Expected HR Zone</span>\n                          <span className=\"font-medium\">{generatedWorkout.expectedHRZone || \"Zone 4-5\"}</span>\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-4 h-2 bg-muted rounded\"></div>\n                          <div className=\"w-4 h-2 bg-muted rounded\"></div>\n                          <div className=\"w-4 h-2 bg-muted rounded\"></div>\n                          <div className=\"w-4 h-2 bg-accent rounded\"></div>\n                          <div className=\"w-4 h-2 bg-primary rounded\"></div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      {generatedWorkout.phases?.map((phase: any, index: number) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-background rounded border border-border\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                              index === 0 ? 'bg-primary/20' : \n                              index === 1 ? 'bg-accent/20' : 'bg-green-500/20'\n                            }`}>\n                              <span className={`font-bold text-sm ${\n                                index === 0 ? 'text-primary' : \n                                index === 1 ? 'text-accent' : 'text-green-500'\n                              }`}>\n                                {index + 1}\n                              </span>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{phase.name}</p>\n                              <p className=\"text-xs text-muted-foreground\">{phase.description}</p>\n                            </div>\n                          </div>\n                          <span className=\"text-sm text-muted-foreground\">{phase.duration} min</span>\n                        </div>\n                      )) || (\n                        <>\n                          <div className=\"flex items-center justify-between p-3 bg-background rounded border border-border\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center\">\n                                <span className=\"text-primary font-bold text-sm\">1</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">Dynamic Warm-up</p>\n                                <p className=\"text-xs text-muted-foreground\">GOATA movement prep</p>\n                              </div>\n                            </div>\n                            <span className=\"text-sm text-muted-foreground\">8 min</span>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between p-3 bg-background rounded border border-border\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center\">\n                                <span className=\"text-accent font-bold text-sm\">2</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">Advanced Dribbling Drills</p>\n                                <p className=\"text-xs text-muted-foreground\">Chain integration focus</p>\n                              </div>\n                            </div>\n                            <span className=\"text-sm text-muted-foreground\">25 min</span>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between p-3 bg-background rounded border border-border\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center\">\n                                <span className=\"text-green-500 font-bold text-sm\">3</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">Recovery & Mobility</p>\n                                <p className=\"text-xs text-muted-foreground\">HRV optimization</p>\n                              </div>\n                            </div>\n                            <span className=\"text-sm text-muted-foreground\">12 min</span>\n                          </div>\n                        </>\n                      )}\n                    </div>\n\n                    <div className=\"flex space-x-3 mt-4\">\n                      <Button className=\"flex-1 gradient-orange\" data-testid=\"button-start-ai-workout\">\n                        Start Workout\n                      </Button>\n                      <Button \n                        variant=\"secondary\"\n                        onClick={() => setGeneratedWorkout(null)}\n                        data-testid=\"button-generate-new\"\n                      >\n                        Generate New\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Wearable Integration Panel */}\n        <div className=\"space-y-6\">\n          <Card className=\"glass rounded-xl\">\n            <CardContent className=\"p-6\">\n              <h4 className=\"font-semibold mb-4\">Connected Devices</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-background rounded border border-border\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-slate-800 rounded border border-slate-600\"></div>\n                    <div>\n                      <p className=\"font-medium text-sm\">Apple Watch</p>\n                      <p className=\"text-xs text-green-500\">Connected</p>\n                    </div>\n                  </div>\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-background rounded border border-border opacity-50\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded\"></div>\n                    <div>\n                      <p className=\"font-medium text-sm\">Garmin</p>\n                      <p className=\"text-xs text-muted-foreground\">Available</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"secondary\" className=\"text-xs\">\n                    Connect\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Live Metrics */}\n          <LiveMetrics />\n        </div>\n      </div>\n    </section>\n  );\n}\n\nfunction LiveMetrics() {\n  const { data: liveData } = useQuery({\n    queryKey: [\"/api/biometrics/live\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  const heartRate = (liveData as any)?.heartRate || 148;\n  const steps = (liveData as any)?.steps || 2450;\n  const calories = (liveData as any)?.calories || 847;\n\n  return (\n    <Card className=\"glass rounded-xl\">\n      <CardContent className=\"p-6\">\n        <h4 className=\"font-semibold mb-4\">Live Metrics</h4>\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <div className=\"relative w-24 h-24 mx-auto mb-2\">\n              <svg className=\"w-24 h-24 transform -rotate-90\" viewBox=\"0 0 36 36\">\n                <path \n                  className=\"text-muted stroke-current\" \n                  strokeWidth=\"3\" \n                  fill=\"none\" \n                  d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                />\n                <path \n                  className=\"text-accent stroke-current\" \n                  strokeWidth=\"3\" \n                  strokeDasharray={`${(heartRate / 200) * 100}, 100`}\n                  strokeLinecap=\"round\" \n                  fill=\"none\" \n                  d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                />\n              </svg>\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <span className=\"text-lg font-bold\" data-testid=\"live-heart-rate\">{heartRate}</span>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Heart Rate (BPM)</p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 text-center\">\n            <div>\n              <p className=\"text-xl font-bold text-primary\" data-testid=\"live-steps\">{steps.toLocaleString()}</p>\n              <p className=\"text-xs text-muted-foreground\">Steps</p>\n            </div>\n            <div>\n              <p className=\"text-xl font-bold text-green-500\" data-testid=\"live-calories\">{calories}</p>\n              <p className=\"text-xs text-muted-foreground\">Calories</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":14592},"client/src/components/dashboard/hero-section.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function HeroSection() {\n  const { user } = useAuth();\n  const userName = (user as any)?.firstName || (user as any)?.email?.split('@')[0] || 'Athlete';\n\n  return (\n    <section className=\"mb-12\">\n      <div className=\"relative overflow-hidden rounded-2xl glass p-8 basketball-mesh border-primary/20\">\n        <div className=\"absolute inset-0 gradient-court opacity-5\"></div>\n        <div className=\"relative z-10 grid lg:grid-cols-2 gap-8 items-center\">\n          <div className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                <p className=\"text-accent font-medium tracking-wide\">Good morning, {userName}!</p>\n              </div>\n              <h2 className=\"text-4xl lg:text-6xl font-bold leading-tight\">\n                Make sense of your\n                <span className=\"bg-gradient-to-r from-primary via-orange-400 to-accent bg-clip-text text-transparent block animate-scale-bounce\">\n                  wearable data\n                </span>\n                and training\n              </h2>\n              <p className=\"text-lg text-muted-foreground max-w-md leading-relaxed\">\n                Process workouts from your wearables, build personalized training plans, and fill gaps with AI-powered assistance.\n              </p>\n            </div>\n            <div className=\"flex flex-wrap gap-4\">\n              <Button \n                className=\"gradient-orange text-lg px-8 py-4 h-14 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n                onClick={() => window.location.href = '/workout-management'}\n                data-testid=\"button-process-wearable-data\"\n              >\n                <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2M4 13h2\"/>\n                </svg>\n                Process Wearable Data\n              </Button>\n              <Button \n                variant=\"secondary\"\n                className=\"text-lg px-8 py-4 h-14 rounded-xl font-medium glass border-accent/20 hover:border-accent/40 transition-all duration-300\"\n                onClick={() => window.location.href = '/workout-management?tab=schedule'}\n                data-testid=\"button-plan-workouts\"\n              >\n                <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\n                </svg>\n                Plan Workouts\n              </Button>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <div className=\"aspect-[4/3] glass rounded-2xl flex items-center justify-center relative overflow-hidden border border-primary/10\">\n              <div className=\"absolute inset-0 gradient-court opacity-10\"></div>\n              <div className=\"relative z-10 text-center\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full flex items-center justify-center mx-auto mb-4 animate-bounce-subtle\">\n                  <svg className=\"w-12 h-12 text-primary\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"2\" fill=\"none\"/>\n                    <path d=\"M12 2a10 10 0 0 0 0 20M12 2a10 10 0 0 1 0 20M2 12h20\" stroke=\"currentColor\" strokeWidth=\"1\"/>\n                  </svg>\n                </div>\n                <p className=\"text-foreground text-sm font-medium mb-1\">Basketball Analytics</p>\n                <p className=\"text-xs text-muted-foreground\">Powered by AI insights</p>\n              </div>\n            </div>\n            <div className=\"absolute -bottom-4 -right-4 glass rounded-xl p-4 animate-slide-in-right border border-green-500/20\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm font-medium text-green-400\">AI Coach Active</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4632},"client/src/components/dashboard/performance-metrics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function PerformanceMetrics() {\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"mb-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"glass\">\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-4 w-24 mb-2\" />\n                <Skeleton className=\"h-8 w-16 mb-1\" />\n                <Skeleton className=\"h-3 w-20\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <Card className=\"glass\">\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </section>\n    );\n  }\n\n  const stats = dashboardData?.stats || {};\n\n  return (\n    <section className=\"mb-12\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-2xl font-bold\">Performance Overview</h3>\n        <Select defaultValue=\"7days\">\n          <SelectTrigger className=\"w-40 bg-secondary border-border\" data-testid=\"select-time-period\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"7days\">Last 7 days</SelectItem>\n            <SelectItem value=\"30days\">Last 30 days</SelectItem>\n            <SelectItem value=\"3months\">Last 3 months</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {/* Workout Streak */}\n        <Card className=\"glass rounded-xl metric-card hover-elevate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"text-sm font-medium text-muted-foreground\">Workout Streak</h4>\n              <svg className=\"w-5 h-5 text-primary\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z\" clipRule=\"evenodd\"/>\n              </svg>\n            </div>\n            <div className=\"space-y-1\">\n              <span className=\"text-3xl font-bold text-primary\" data-testid=\"metric-streak\">\n                {stats.currentStreak || 0}\n              </span>\n              <p className=\"text-sm text-green-500 font-medium\">+3 from last week</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Average Heart Rate */}\n        <Card className=\"glass rounded-xl metric-card hover-elevate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"text-sm font-medium text-muted-foreground\">Average Heart Rate</h4>\n              <svg className=\"w-5 h-5 text-accent\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\"/>\n              </svg>\n            </div>\n            <div className=\"space-y-1\">\n              <span className=\"text-3xl font-bold text-accent\" data-testid=\"metric-heart-rate\">\n                {stats.averageHeartRate || 156}\n              </span>\n              <p className=\"text-sm text-muted-foreground font-mono\">BPM</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recovery Score */}\n        <Card className=\"glass rounded-xl metric-card hover-elevate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"text-sm font-medium text-muted-foreground\">Recovery Score</h4>\n              <svg className=\"w-5 h-5 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\"/>\n              </svg>\n            </div>\n            <div className=\"space-y-1\">\n              <span className=\"text-3xl font-bold text-green-500\" data-testid=\"metric-recovery\">\n                {Math.round(stats.recoveryScore || 87)}%\n              </span>\n              <p className=\"text-sm text-green-500 font-medium\">Excellent</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Total Points */}\n        <Card className=\"glass rounded-xl metric-card hover-elevate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"text-sm font-medium text-muted-foreground\">Total Points</h4>\n              <svg className=\"w-5 h-5 text-orange-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"/>\n              </svg>\n            </div>\n            <div className=\"space-y-1\">\n              <span className=\"text-3xl font-bold text-orange-500\" data-testid=\"metric-points\">\n                {stats.totalPoints?.toLocaleString() || '2,840'}\n              </span>\n              <p className=\"text-sm text-orange-500 font-medium\">Level 12</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Progress Chart */}\n      <Card className=\"glass rounded-xl\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h4 className=\"text-lg font-semibold\">Performance Trends</h4>\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"px-3 py-1 bg-primary text-primary-foreground rounded-md text-sm\">\n                Skills\n              </button>\n              <button className=\"px-3 py-1 bg-secondary text-secondary-foreground rounded-md text-sm\">\n                Fitness\n              </button>\n              <button className=\"px-3 py-1 bg-secondary text-secondary-foreground rounded-md text-sm\">\n                Recovery\n              </button>\n            </div>\n          </div>\n          \n          {/* Mock Chart Area */}\n          <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center relative overflow-hidden\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 via-accent/10 to-primary/10\"></div>\n            <svg className=\"w-full h-full absolute inset-0\" viewBox=\"0 0 400 200\">\n              <defs>\n                <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                  <stop offset=\"0%\" style={{stopColor:'#FF6B35', stopOpacity:0.3}} />\n                  <stop offset=\"100%\" style={{stopColor:'#FF6B35', stopOpacity:0}} />\n                </linearGradient>\n              </defs>\n              <path d=\"M0,150 Q100,120 200,100 T400,80\" stroke=\"#FF6B35\" strokeWidth=\"3\" fill=\"none\"/>\n              <path d=\"M0,150 Q100,120 200,100 T400,80 L400,200 L0,200 Z\" fill=\"url(#gradient)\"/>\n              <circle cx=\"50\" cy=\"140\" r=\"4\" fill=\"#FF6B35\"/>\n              <circle cx=\"150\" cy=\"110\" r=\"4\" fill=\"#FF6B35\"/>\n              <circle cx=\"250\" cy=\"95\" r=\"4\" fill=\"#FF6B35\"/>\n              <circle cx=\"350\" cy=\"85\" r=\"4\" fill=\"#FF6B35\"/>\n            </svg>\n            <div className=\"relative z-10 text-center\">\n              <p className=\"text-muted-foreground\">Interactive performance visualization</p>\n              <p className=\"text-sm text-muted-foreground\">Built with Recharts & Framer Motion</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":8814},"client/src/components/dashboard/social-features.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function SocialFeatures() {\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"mb-12\">\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {Array.from({ length: 2 }).map((_, i) => (\n            <Card key={i} className=\"glass\">\n              <CardHeader>\n                <Skeleton className=\"h-6 w-48\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 3 }).map((_, j) => (\n                    <div key={j} className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-10 w-10 rounded-full\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-4 w-32 mb-1\" />\n                        <Skeleton className=\"h-3 w-24\" />\n                      </div>\n                      <Skeleton className=\"h-6 w-6\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n    );\n  }\n\n  const leaderboard = dashboardData?.leaderboard || [];\n  const activityFeed = dashboardData?.activityFeed || [];\n\n  return (\n    <section className=\"mb-12\">\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Leaderboard */}\n        <Card className=\"glass rounded-xl\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl\">Weekly Leaderboard</CardTitle>\n              <Button variant=\"ghost\" className=\"text-sm text-accent hover:text-accent/80\" data-testid=\"button-view-all-leaderboard\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {leaderboard.map((entry: any, index: number) => (\n                <div \n                  key={entry.user.id} \n                  className={`flex items-center space-x-4 p-3 rounded-lg ${\n                    entry.rank === 1 \n                      ? 'bg-gradient-to-r from-primary/10 to-orange-500/5 border border-primary/20' \n                      : 'hover:bg-muted/20 transition-colors'\n                  }`}\n                >\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                    entry.rank === 1 ? 'bg-primary' : 'bg-secondary'\n                  }`}>\n                    <span className={`font-bold text-sm ${\n                      entry.rank === 1 ? 'text-primary-foreground' : 'text-secondary-foreground'\n                    }`}>\n                      {entry.rank}\n                    </span>\n                  </div>\n                  <Avatar className=\"w-10 h-10\">\n                    <AvatarImage src={entry.user.profileImageUrl} />\n                    <AvatarFallback>\n                      {entry.user.firstName?.[0] || entry.user.email?.[0] || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\" data-testid={`leaderboard-user-${entry.rank}`}>\n                      {entry.user.firstName || entry.user.email?.split('@')[0] || 'User'}\n                      {entry.rank === 1 && ' (You)'}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {entry.profile.totalPoints?.toLocaleString() || 0} points\n                    </p>\n                  </div>\n                  <div className=\"text-lg\">\n                    {entry.rank === 1 && '🏆'}\n                    {entry.rank === 2 && '🥈'}\n                    {entry.rank === 3 && '🥉'}\n                  </div>\n                </div>\n              ))}\n              \n              {leaderboard.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No leaderboard data available</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity Feed */}\n        <Card className=\"glass rounded-xl\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl\">Recent Activity</CardTitle>\n              <Button variant=\"ghost\" className=\"text-sm text-accent hover:text-accent/80\" data-testid=\"button-view-all-activity\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {activityFeed.map((activity: any) => (\n                <div \n                  key={activity.id} \n                  className=\"flex items-start space-x-3 p-3 rounded-lg bg-background border border-border hover:border-primary/20 transition-colors\"\n                >\n                  <div className={`w-2 h-2 rounded-full mt-2 ${\n                    activity.activityType === 'workout_completed' ? 'bg-green-500' :\n                    activity.activityType === 'achievement_unlocked' ? 'bg-primary' :\n                    activity.activityType === 'personal_best' ? 'bg-accent' : 'bg-muted'\n                  }`}></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">\n                      <strong>{activity.user.firstName || activity.user.email?.split('@')[0] || 'User'}</strong>{' '}\n                      {activity.title}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(activity.createdAt).toLocaleDateString()} • \n                      {activity.points && ` +${activity.points} XP`}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              \n              {activityFeed.length === 0 && (\n                <>\n                  <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-background border border-border\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\"><strong>You</strong> joined HoopMetrics</p>\n                      <p className=\"text-xs text-muted-foreground\">Welcome to the community!</p>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6897},"client/src/components/dashboard/training-analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function TrainingAnalytics() {\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n  });\n\n  const stats = (dashboardData as any)?.stats || {};\n\n  if (isLoading) {\n    return (\n      <section className=\"mb-12\">\n        <Card className=\"glass\">\n          <CardHeader>\n            <Skeleton className=\"h-6 w-48\" />\n            <Skeleton className=\"h-4 w-32\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"bg-background rounded-lg p-4 border border-border\">\n                  <Skeleton className=\"h-4 w-32 mb-4\" />\n                  <Skeleton className=\"h-32 w-full mb-4\" />\n                  <Skeleton className=\"h-3 w-24\" />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"mb-12\">\n      <Card className=\"glass rounded-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl\">Training Analytics</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">Powered by</span>\n              <span className=\"text-sm font-medium text-accent\">Claude AI</span>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* Skill Radar Chart */}\n            <div className=\"bg-background rounded-lg p-4 border border-border\">\n              <h4 className=\"font-semibold mb-4 text-center\">Skill Assessment</h4>\n              <div className=\"relative w-48 h-48 mx-auto\">\n                {/* SVG Radar Chart */}\n                <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\n                  <defs>\n                    <linearGradient id=\"radarGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                      <stop offset=\"0%\" style={{stopColor:'#FF6B35', stopOpacity:0.3}} />\n                      <stop offset=\"100%\" style={{stopColor:'#0EA5E9', stopOpacity:0.1}} />\n                    </linearGradient>\n                  </defs>\n                  {/* Pentagon background */}\n                  <polygon \n                    points=\"100,20 170,65 145,150 55,150 30,65\" \n                    stroke=\"hsl(var(--border))\" \n                    strokeWidth=\"1\" \n                    fill=\"none\" \n                    opacity=\"0.3\"\n                  />\n                  <polygon \n                    points=\"100,40 150,75 130,140 70,140 50,75\" \n                    stroke=\"hsl(var(--border))\" \n                    strokeWidth=\"1\" \n                    fill=\"none\" \n                    opacity=\"0.3\"\n                  />\n                  <polygon \n                    points=\"100,60 130,85 115,130 85,130 70,85\" \n                    stroke=\"hsl(var(--border))\" \n                    strokeWidth=\"1\" \n                    fill=\"none\" \n                    opacity=\"0.3\"\n                  />\n                  {/* Data polygon */}\n                  <polygon \n                    points=\"100,30 160,70 130,145 75,135 40,70\" \n                    stroke=\"#FF6B35\" \n                    strokeWidth=\"2\" \n                    fill=\"url(#radarGradient)\"\n                  />\n                  {/* Data points */}\n                  <circle cx=\"100\" cy=\"30\" r=\"3\" fill=\"#FF6B35\"/>\n                  <circle cx=\"160\" cy=\"70\" r=\"3\" fill=\"#FF6B35\"/>\n                  <circle cx=\"130\" cy=\"145\" r=\"3\" fill=\"#0EA5E9\"/>\n                  <circle cx=\"75\" cy=\"135\" r=\"3\" fill=\"#0EA5E9\"/>\n                  <circle cx=\"40\" cy=\"70\" r=\"3\" fill=\"#10B981\"/>\n                </svg>\n              </div>\n              <div className=\"text-center space-y-1 mt-4\">\n                <div className=\"flex justify-center space-x-4 text-xs\">\n                  <span className=\"text-primary\">Ball Handling</span>\n                  <span className=\"text-accent\">Shooting</span>\n                  <span className=\"text-green-500\">Defense</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Training Load */}\n            <div className=\"bg-background rounded-lg p-4 border border-border\">\n              <h4 className=\"font-semibold mb-4\">Training Load</h4>\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>This Week</span>\n                    <span className=\"font-medium\" data-testid=\"training-load-week\">8.2/10</span>\n                  </div>\n                  <Progress value={82} className=\"h-3\" />\n                  <p className=\"text-xs text-green-500 mt-1\">Optimal load</p>\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Recovery Need</span>\n                    <span className=\"font-medium\" data-testid=\"recovery-need\">Low</span>\n                  </div>\n                  <Progress value={25} className=\"h-3\" />\n                </div>\n                \n                <div className=\"pt-2 border-t border-border\">\n                  <p className=\"text-sm font-medium\">AI Recommendation</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Your training load is optimal. Consider adding one high-intensity session this week.\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            {/* GOATA Movement Quality */}\n            <div className=\"bg-background rounded-lg p-4 border border-border\">\n              <h4 className=\"font-semibold mb-4\">Movement Quality (GOATA)</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Chain Integration</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={85} className=\"w-16 h-2\" />\n                    <span className=\"text-xs font-medium\" data-testid=\"chain-integration\">85%</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Core Stability</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={78} className=\"w-16 h-2\" />\n                    <span className=\"text-xs font-medium\" data-testid=\"core-stability\">78%</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Hip Function</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={92} className=\"w-16 h-2\" />\n                    <span className=\"text-xs font-medium\" data-testid=\"hip-function\">92%</span>\n                  </div>\n                </div>\n                \n                <div className=\"pt-2 border-t border-border\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    Focus on anterior chain exercises to improve balance.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":7774},"client/src/components/layout/header.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function Header() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-lg font-bold text-primary-foreground\">H</span>\n            </div>\n            <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              HoopMetrics\n            </h1>\n          </Link>\n          <nav className=\"hidden md:flex items-center space-x-6 text-sm font-medium\">\n            <Link \n              href=\"/\" \n              className={`transition-colors hover:text-primary ${location === '/' ? 'text-foreground' : 'text-muted-foreground'}`}\n              data-testid=\"nav-dashboard\"\n            >\n              Dashboard\n            </Link>\n            <Link \n              href=\"/workouts\" \n              className={`transition-colors hover:text-primary ${location === '/workouts' ? 'text-foreground' : 'text-muted-foreground'}`}\n              data-testid=\"nav-workouts\"\n            >\n              Workouts\n            </Link>\n            <Link \n              href=\"/fitness-plans\" \n              className={`transition-colors hover:text-primary ${location === '/fitness-plans' ? 'text-foreground' : 'text-muted-foreground'}`}\n              data-testid=\"nav-fitness-plans\"\n            >\n              Fitness Plans\n            </Link>\n            <Link \n              href=\"/analytics\" \n              className={`transition-colors hover:text-primary ${location === '/analytics' ? 'text-foreground' : 'text-muted-foreground'}`}\n              data-testid=\"nav-analytics\"\n            >\n              Analytics\n            </Link>\n            <Link \n              href=\"/social\" \n              className={`transition-colors hover:text-primary ${location === '/social' ? 'text-foreground' : 'text-muted-foreground'}`}\n              data-testid=\"nav-social\"\n            >\n              Social\n            </Link>\n          </nav>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"relative text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-notifications\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 17h5l-5 5v-5z\"/>\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 7H4l5-5v5z\"/>\n            </svg>\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-primary rounded-full animate-pulse\"></span>\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            {user?.profileImageUrl ? (\n              <img \n                src={user.profileImageUrl} \n                alt=\"User Avatar\" \n                className=\"w-8 h-8 rounded-full border-2 border-primary object-cover\" \n              />\n            ) : (\n              <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium\">\n                  {user?.firstName?.[0] || user?.email?.[0] || 'U'}\n                </span>\n              </div>\n            )}\n            <span className=\"hidden md:block text-sm font-medium\">\n              {user?.firstName || user?.email?.split('@')[0] || 'User'}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => window.location.href = '/api/logout'}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-logout\"\n            >\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4381},"client/src/components/layout/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"md:hidden fixed bottom-0 left-0 right-0 bg-background border-t border-border z-50\">\n      <div className=\"grid grid-cols-5 h-16\">\n        <Link href=\"/\" className={`flex flex-col items-center justify-center space-y-1 ${location === '/' ? 'text-primary' : 'text-muted-foreground'}`}>\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"/>\n          </svg>\n          <span className=\"text-xs\">Home</span>\n        </Link>\n        <Link href=\"/workouts\" className={`flex flex-col items-center justify-center space-y-1 ${location === '/workouts' ? 'text-primary' : 'text-muted-foreground'}`}>\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"/>\n          </svg>\n          <span className=\"text-xs\">Workouts</span>\n        </Link>\n        <Link href=\"/analytics\" className={`flex flex-col items-center justify-center space-y-1 ${location === '/analytics' ? 'text-primary' : 'text-muted-foreground'}`}>\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"/>\n          </svg>\n          <span className=\"text-xs\">Analytics</span>\n        </Link>\n        <Link href=\"/social\" className={`flex flex-col items-center justify-center space-y-1 ${location === '/social' ? 'text-primary' : 'text-muted-foreground'}`}>\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"/>\n          </svg>\n          <span className=\"text-xs\">Social</span>\n        </Link>\n        <Link href=\"/profile\" className={`flex flex-col items-center justify-center space-y-1 ${location === '/profile' ? 'text-primary' : 'text-muted-foreground'}`}>\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"/>\n          </svg>\n          <span className=\"text-xs\">Profile</span>\n        </Link>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3104},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n","size_bytes":1578},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ai-helper/floating-ai-helper.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function FloatingAIHelper() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [conversation, setConversation] = useState<Array<{\n    type: 'user' | 'ai';\n    content: string;\n    timestamp: Date;\n  }>>([]);\n  const recognition = useRef<any>(null);\n  const { toast } = useToast();\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;\n      recognition.current = new SpeechRecognition();\n      recognition.current.continuous = false;\n      recognition.current.interimResults = false;\n      recognition.current.lang = 'en-US';\n\n      recognition.current.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        setMessage(transcript);\n        setIsListening(false);\n      };\n\n      recognition.current.onerror = () => {\n        setIsListening(false);\n        toast({\n          title: \"Speech Recognition Error\",\n          description: \"Could not capture speech. Please try typing instead.\",\n          variant: \"destructive\",\n        });\n      };\n\n      recognition.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n  }, [toast]);\n\n  const processMessageMutation = useMutation({\n    mutationFn: async (userMessage: string) => {\n      return await apiRequest(\"POST\", \"/api/ai/process-workout-message\", { \n        message: userMessage \n      });\n    },\n    onSuccess: (response: any) => {\n      const aiResponse = response.response || \"I've processed your workout information.\";\n      setConversation(prev => [\n        ...prev,\n        { type: 'user', content: message, timestamp: new Date() },\n        { type: 'ai', content: aiResponse, timestamp: new Date() }\n      ]);\n      setMessage(\"\");\n      \n      if (response.workoutCreated) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/workout-inbox\"] });\n        toast({\n          title: \"Workout Logged\",\n          description: \"Your workout has been added to your training log.\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process your message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const startListening = () => {\n    if (recognition.current && !isListening) {\n      setIsListening(true);\n      recognition.current.start();\n    }\n  };\n\n  const handleSubmit = () => {\n    if (message.trim()) {\n      processMessageMutation.mutate(message.trim());\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {isOpen && (\n        <Card className=\"mb-4 w-80 max-h-96 glass border-primary/20 animate-slide-up\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"font-semibold text-sm\">AI Workout Assistant</h3>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setIsOpen(false)}\n                className=\"h-6 w-6 p-0\"\n                data-testid=\"button-close-ai-helper\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n                </svg>\n              </Button>\n            </div>\n            \n            {/* Conversation History */}\n            {conversation.length > 0 && (\n              <div className=\"max-h-32 overflow-y-auto mb-3 space-y-2\">\n                {conversation.slice(-4).map((msg, index) => (\n                  <div\n                    key={index}\n                    className={`text-xs p-2 rounded ${\n                      msg.type === 'user' \n                        ? 'bg-primary/10 text-primary ml-4' \n                        : 'bg-accent/10 text-accent mr-4'\n                    }`}\n                  >\n                    {msg.content}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Input Area */}\n            <div className=\"space-y-2\">\n              <Textarea\n                placeholder=\"Tell me about your workout... (e.g., 'I just did 30 minutes of basketball practice')\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                className=\"min-h-[60px] text-sm resize-none\"\n                data-testid=\"input-workout-message\"\n              />\n              \n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={handleSubmit}\n                  disabled={!message.trim() || processMessageMutation.isPending}\n                  className=\"flex-1 gradient-orange\"\n                  data-testid=\"button-send-message\"\n                >\n                  {processMessageMutation.isPending ? (\n                    <>\n                      <svg className=\"w-3 h-3 mr-1 animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <circle cx=\"12\" cy=\"12\" r=\"10\" strokeWidth=\"4\" className=\"opacity-25\"/>\n                        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"/>\n                      </svg>\n                      Processing...\n                    </>\n                  ) : (\n                    \"Send\"\n                  )}\n                </Button>\n                \n                {recognition.current && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={startListening}\n                    disabled={isListening || processMessageMutation.isPending}\n                    className=\"px-3\"\n                    data-testid=\"button-voice-input\"\n                  >\n                    {isListening ? (\n                      <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                    ) : (\n                      <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n                      </svg>\n                    )}\n                  </Button>\n                )}\n              </div>\n              \n              {isListening && (\n                <div className=\"flex items-center space-x-2 text-xs text-red-500\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n                  <span>Listening...</span>\n                </div>\n              )}\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"flex flex-wrap gap-1 mt-3\">\n              {[\n                \"I just finished basketball practice\",\n                \"Did a 30min cardio session\", \n                \"Completed strength training\"\n              ].map((quick, index) => (\n                <Badge\n                  key={index}\n                  variant=\"outline\"\n                  className=\"text-xs cursor-pointer hover:bg-primary/10 hover:border-primary/40\"\n                  onClick={() => setMessage(quick)}\n                  data-testid={`button-quick-${index}`}\n                >\n                  {quick}\n                </Badge>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Floating Button */}\n      <Button\n        size=\"icon\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-14 h-14 rounded-full shadow-2xl gradient-court animate-bounce-subtle\"\n        data-testid=\"button-ai-helper-toggle\"\n      >\n        {isOpen ? (\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n          </svg>\n        ) : (\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"/>\n          </svg>\n        )}\n      </Button>\n    </div>\n  );\n}","size_bytes":9321},"client/src/components/dashboard/workout-inbox.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WorkoutInboxItem {\n  id: string;\n  title: string;\n  duration: number;\n  caloriesBurned: number;\n  averageHeartRate: number;\n  autoDetectedType: string;\n  confidence: number;\n  aiSummary: string;\n  receivedAt: string;\n  status: 'pending' | 'categorized' | 'ignored';\n  category?: string;\n}\n\nexport default function WorkoutInbox() {\n  const { toast } = useToast();\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\n\n  const { data: inboxItems, isLoading } = useQuery({\n    queryKey: [\"/api/workout-inbox\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const categorizeWorkoutMutation = useMutation({\n    mutationFn: async ({ itemId, category }: { itemId: string; category: string }) => {\n      return await apiRequest(\"POST\", `/api/workout-inbox/${itemId}/categorize`, { category });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-inbox\"] });\n      toast({\n        title: \"Workout Categorized\",\n        description: \"Workout has been successfully categorized and added to your training log.\",\n      });\n      setSelectedItem(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to categorize workout. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const ignoreWorkoutMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      return await apiRequest(\"POST\", `/api/workout-inbox/${itemId}/ignore`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-inbox\"] });\n      toast({\n        title: \"Workout Ignored\",\n        description: \"Workout has been removed from your inbox.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to ignore workout. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const workoutCategories = [\n    { id: 'basketball_training', name: 'Basketball Training', color: 'bg-primary' },\n    { id: 'strength', name: 'Strength Training', color: 'bg-blue-500' },\n    { id: 'cardio', name: 'Cardio', color: 'bg-green-500' },\n    { id: 'recovery', name: 'Recovery', color: 'bg-purple-500' },\n    { id: 'skills', name: 'Skills Practice', color: 'bg-orange-500' },\n    { id: 'other', name: 'Other Activity', color: 'bg-gray-500' },\n  ];\n\n  const pendingItems = (inboxItems as WorkoutInboxItem[])?.filter(item => item.status === 'pending') || [];\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass rounded-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <svg className=\"w-5 h-5 text-accent\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-5.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-2.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 009.586 13H4\"/>\n            </svg>\n            <span>Workout Inbox</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-20 bg-muted/50 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"glass rounded-xl\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <svg className=\"w-5 h-5 text-accent\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-5.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-2.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 009.586 13H4\"/>\n            </svg>\n            <span>Workout Inbox</span>\n          </CardTitle>\n          {pendingItems.length > 0 && (\n            <Badge className=\"bg-primary text-primary-foreground animate-pulse\">\n              {pendingItems.length} new\n            </Badge>\n          )}\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          New workouts from your wearable devices are ready to be categorized\n        </p>\n      </CardHeader>\n      <CardContent>\n        {pendingItems.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"/>\n              </svg>\n            </div>\n            <h3 className=\"font-medium mb-2\">All caught up!</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              No new workouts to categorize. Your wearable data will appear here automatically.\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {pendingItems.map((item, index) => (\n              <div key={item.id} className={`animate-slide-up stagger-${Math.min(index + 1, 5)}`}>\n                <div className=\"bg-background/50 rounded-lg p-4 border border-border hover:border-primary/50 transition-all duration-300\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h4 className=\"font-medium\" data-testid={`workout-title-${item.id}`}>\n                          {item.title}\n                        </h4>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {item.autoDetectedType}\n                        </Badge>\n                        <div className=\"flex items-center space-x-1\">\n                          <div className={`w-2 h-2 rounded-full ${\n                            item.confidence > 0.8 ? 'bg-green-500' : \n                            item.confidence > 0.6 ? 'bg-yellow-500' : 'bg-red-500'\n                          }`}></div>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {Math.round(item.confidence * 100)}% confidence\n                          </span>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        {item.aiSummary}\n                      </p>\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span className=\"flex items-center space-x-1\">\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                          </svg>\n                          <span>{item.duration} min</span>\n                        </span>\n                        <span className=\"flex items-center space-x-1\">\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z\"/>\n                          </svg>\n                          <span>{item.caloriesBurned} cal</span>\n                        </span>\n                        <span className=\"flex items-center space-x-1\">\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"/>\n                          </svg>\n                          <span>{item.averageHeartRate} bpm</span>\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(item.receivedAt).toLocaleDateString()}\n                    </div>\n                  </div>\n\n                  {selectedItem === item.id ? (\n                    <div className=\"animate-slide-up\">\n                      <Separator className=\"my-3\" />\n                      <div className=\"space-y-3\">\n                        <p className=\"text-sm font-medium\">Categorize this workout:</p>\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {workoutCategories.map(category => (\n                            <Button\n                              key={category.id}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"justify-start text-xs h-8\"\n                              onClick={() => categorizeWorkoutMutation.mutate({ \n                                itemId: item.id, \n                                category: category.id \n                              })}\n                              disabled={categorizeWorkoutMutation.isPending}\n                              data-testid={`button-category-${category.id}`}\n                            >\n                              <div className={`w-2 h-2 rounded-full ${category.color} mr-2`}></div>\n                              {category.name}\n                            </Button>\n                          ))}\n                        </div>\n                        <div className=\"flex space-x-2 pt-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setSelectedItem(null)}\n                            className=\"flex-1\"\n                            data-testid=\"button-cancel-categorize\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => ignoreWorkoutMutation.mutate(item.id)}\n                            disabled={ignoreWorkoutMutation.isPending}\n                            className=\"flex-1\"\n                            data-testid=\"button-ignore-workout\"\n                          >\n                            Ignore\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex space-x-2 mt-3\">\n                      <Button\n                        size=\"sm\"\n                        className=\"gradient-orange flex-1\"\n                        onClick={() => setSelectedItem(item.id)}\n                        data-testid={`button-categorize-${item.id}`}\n                      >\n                        Categorize\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => ignoreWorkoutMutation.mutate(item.id)}\n                        disabled={ignoreWorkoutMutation.isPending}\n                        data-testid={`button-quick-ignore-${item.id}`}\n                      >\n                        Ignore\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":12437},"client/src/pages/workout-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function WorkoutManagement() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [selectedInboxItem, setSelectedInboxItem] = useState<any>(null);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  // Check URL for tab parameter\n  const urlParams = new URLSearchParams(window.location.search);\n  const defaultTab = urlParams.get('tab') || 'inbox';\n\n  const { data: inboxItems, isLoading: inboxLoading } = useQuery({\n    queryKey: [\"/api/workout-inbox\"],\n  });\n\n  const { data: workoutHistory, isLoading: historyLoading } = useQuery({\n    queryKey: [\"/api/workouts\"],\n  });\n\n  const inboxArray = Array.isArray(inboxItems) ? inboxItems : [];\n  const historyArray = Array.isArray(workoutHistory) ? workoutHistory : [];\n\n  const acceptWorkoutMutation = useMutation({\n    mutationFn: async ({ id, category, notes }: { id: string; category: string; notes?: string }) => {\n      return await apiRequest(\"POST\", `/api/workout-inbox/${id}/accept`, { category, notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-inbox\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/workouts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      setSelectedInboxItem(null);\n      toast({\n        title: \"Workout Accepted\",\n        description: \"Workout has been added to your training log.\",\n      });\n    },\n  });\n\n  const ignoreWorkoutMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"POST\", `/api/workout-inbox/${id}/ignore`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-inbox\"] });\n      setSelectedInboxItem(null);\n      toast({\n        title: \"Workout Ignored\",\n        description: \"Workout has been removed from your inbox.\",\n      });\n    },\n  });\n\n  const scheduleWorkoutMutation = useMutation({\n    mutationFn: async (workoutData: any) => {\n      return await apiRequest(\"POST\", \"/api/workouts/schedule\", workoutData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workouts\"] });\n      toast({\n        title: \"Workout Scheduled\",\n        description: \"Your workout has been scheduled successfully.\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n      {/* Header */}\n      <header className=\"border-b border-border/40 bg-background/80 backdrop-blur-xl\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => navigate(\"/\")}\n                className=\"text-muted-foreground hover:text-foreground\"\n                data-testid=\"button-back-dashboard\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 19l-7-7 7-7\"/>\n                </svg>\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold\">Workout Management</h1>\n                <p className=\"text-sm text-muted-foreground\">Schedule, review, and categorize your training data</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-6\">\n        <Tabs defaultValue={defaultTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n            <TabsTrigger value=\"inbox\" data-testid=\"tab-inbox\">\n              Workout Inbox\n              {inboxArray.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                  {inboxArray.length}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"schedule\" data-testid=\"tab-schedule\">Schedule</TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid=\"tab-history\">History</TabsTrigger>\n          </TabsList>\n\n          {/* Workout Inbox Tab */}\n          <TabsContent value=\"inbox\" className=\"space-y-6\">\n            <Card className=\"glass\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <svg className=\"w-5 h-5 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2M4 13h2\"/>\n                  </svg>\n                  <span>Uncategorized Workouts</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {inboxLoading ? (\n                  <div className=\"space-y-3\">\n                    {Array.from({ length: 3 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse bg-muted rounded-lg h-20\"></div>\n                    ))}\n                  </div>\n                ) : inboxArray.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <svg className=\"w-12 h-12 mx-auto mb-4 opacity-50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                    </svg>\n                    <p>All caught up! No workouts to review.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {inboxArray.map((item: any, index: number) => (\n                      <Card\n                        key={item.id}\n                        className={`cursor-pointer transition-all hover:shadow-md ${\n                          selectedInboxItem?.id === item.id ? 'ring-2 ring-primary' : ''\n                        }`}\n                        onClick={() => setSelectedInboxItem(item)}\n                        data-testid={`card-inbox-item-${index}`}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-3\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {item.autoDetectedType}\n                                </Badge>\n                                <span className=\"text-sm text-muted-foreground\">\n                                  {Math.floor(item.confidence * 100)}% confidence\n                                </span>\n                              </div>\n                              <h4 className=\"font-medium mt-1\">{item.title}</h4>\n                              <p className=\"text-sm text-muted-foreground mt-1\">\n                                {item.duration}min • {item.caloriesBurned} cal • ❤️ {item.averageHeartRate} bpm\n                              </p>\n                              <p className=\"text-xs text-muted-foreground mt-2\">{item.aiSummary}</p>\n                            </div>\n                            \n                            {selectedInboxItem?.id === item.id && (\n                              <div className=\"ml-4 space-y-2 flex-shrink-0\">\n                                <div className=\"space-y-2\">\n                                  <Label className=\"text-xs\">Categorize as:</Label>\n                                  <Select defaultValue=\"basketball_training\">\n                                    <SelectTrigger className=\"w-40 h-8 text-xs\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"basketball_training\">Basketball Training</SelectItem>\n                                      <SelectItem value=\"cardio\">Cardio</SelectItem>\n                                      <SelectItem value=\"strength\">Strength Training</SelectItem>\n                                      <SelectItem value=\"skills\">Skills Practice</SelectItem>\n                                      <SelectItem value=\"recovery\">Recovery</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                                \n                                <div className=\"flex space-x-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      acceptWorkoutMutation.mutate({\n                                        id: item.id,\n                                        category: 'basketball_training',\n                                        notes: 'Added from workout inbox'\n                                      });\n                                    }}\n                                    disabled={acceptWorkoutMutation.isPending}\n                                    className=\"h-7 px-3 text-xs gradient-court\"\n                                    data-testid={`button-accept-${index}`}\n                                  >\n                                    Accept\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      ignoreWorkoutMutation.mutate(item.id);\n                                    }}\n                                    disabled={ignoreWorkoutMutation.isPending}\n                                    className=\"h-7 px-3 text-xs\"\n                                    data-testid={`button-ignore-${index}`}\n                                  >\n                                    Ignore\n                                  </Button>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Schedule Tab */}\n          <TabsContent value=\"schedule\" className=\"space-y-6\">\n            {/* AI-First Scheduling Options */}\n            <div className=\"grid gap-6 mb-8\">\n              <Card className=\"glass border-primary/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <svg className=\"w-5 h-5 text-primary\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"/>\n                    </svg>\n                    <span>AI-Powered Scheduling</span>\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">Let AI help you plan your training schedule</p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <Button \n                      className=\"h-20 p-4 flex flex-col items-start space-y-2 glass border-accent/20 hover:border-accent/40\"\n                      variant=\"outline\"\n                      data-testid=\"button-auto-populate-schedule\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <svg className=\"w-5 h-5 text-accent\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\n                        </svg>\n                        <span className=\"font-semibold\">Auto-Fill from Plans</span>\n                      </div>\n                      <p className=\"text-xs text-left text-muted-foreground\">\n                        Automatically schedule your existing workout plans\n                      </p>\n                    </Button>\n\n                    <Button \n                      className=\"h-20 p-4 flex flex-col items-start space-y-2 glass border-primary/20 hover:border-primary/40\"\n                      variant=\"outline\"\n                      data-testid=\"button-ai-schedule-assist\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <svg className=\"w-5 h-5 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n                        </svg>\n                        <span className=\"font-semibold\">Tell AI Your Plan</span>\n                      </div>\n                      <p className=\"text-xs text-left text-muted-foreground\">\n                        Speak or type what you want to schedule\n                      </p>\n                    </Button>\n                  </div>\n\n                  {/* AI Schedule Input */}\n                  <Card className=\"bg-secondary/20 border-dashed border-2 border-primary/20\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                        <span className=\"text-sm font-medium\">AI Schedule Assistant</span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Input \n                          placeholder=\"Tell me what you want to schedule... (e.g., 'Basketball practice on Tuesday and Thursday')\"\n                          className=\"flex-1\"\n                          data-testid=\"input-ai-schedule\"\n                        />\n                        <Button size=\"icon\" variant=\"outline\" data-testid=\"button-voice-schedule\">\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n                          </svg>\n                        </Button>\n                        <Button className=\"gradient-orange px-6\" data-testid=\"button-process-ai-schedule\">\n                          Schedule\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              {/* Enhanced Calendar */}\n              <Card className=\"lg:col-span-2 glass\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Training Calendar</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {selectedDate ? selectedDate.toLocaleDateString() : \"Select a date\"}\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"rounded-xl border border-border/50 p-4 bg-background/50\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={selectedDate}\n                      onSelect={setSelectedDate}\n                      className=\"rounded-lg\"\n                      showOutsideDays={false}\n                    />\n                  </div>\n                  \n                  {/* Scheduled workouts for selected date */}\n                  {selectedDate && (\n                    <div className=\"mt-6 space-y-3\">\n                      <h4 className=\"font-semibold text-sm\">Scheduled for {selectedDate.toLocaleDateString()}</h4>\n                      <div className=\"space-y-2\">\n                        <Card className=\"border-accent/20\">\n                          <CardContent className=\"p-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <p className=\"font-medium text-sm\">Basketball Training</p>\n                                <p className=\"text-xs text-muted-foreground\">6:00 PM • 60 min</p>\n                              </div>\n                              <Badge variant=\"outline\" className=\"text-xs\">Planned</Badge>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Manual Entry (Last Resort) */}\n              <Card className=\"glass opacity-75\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm flex items-center space-x-2\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"/>\n                    </svg>\n                    <span>Manual Entry</span>\n                  </CardTitle>\n                  <p className=\"text-xs text-muted-foreground\">Only if AI assistance doesn't work</p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"workout-type\" className=\"text-xs\">Workout Type</Label>\n                    <Select>\n                      <SelectTrigger className=\"h-8\">\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"basketball_training\">Basketball</SelectItem>\n                        <SelectItem value=\"cardio\">Cardio</SelectItem>\n                        <SelectItem value=\"strength\">Strength</SelectItem>\n                        <SelectItem value=\"skills\">Skills</SelectItem>\n                        <SelectItem value=\"recovery\">Recovery</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"duration\" className=\"text-xs\">Duration</Label>\n                      <Input id=\"duration\" type=\"number\" placeholder=\"60\" className=\"h-8\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"time\" className=\"text-xs\">Time</Label>\n                      <Input id=\"time\" type=\"time\" className=\"h-8\" />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"notes\" className=\"text-xs\">Notes</Label>\n                    <Textarea\n                      id=\"notes\"\n                      placeholder=\"Optional notes...\"\n                      className=\"min-h-[60px] text-xs\"\n                    />\n                  </div>\n\n                  <Button \n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"w-full h-8\"\n                    onClick={() => scheduleWorkoutMutation.mutate({})}\n                    data-testid=\"button-manual-schedule\"\n                  >\n                    Add Manually\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* History Tab */}\n          <TabsContent value=\"history\" className=\"space-y-6\">\n            <Card className=\"glass\">\n              <CardHeader>\n                <CardTitle>Workout History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {historyLoading ? (\n                  <div className=\"space-y-3\">\n                    {Array.from({ length: 5 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse bg-muted rounded-lg h-16\"></div>\n                    ))}\n                  </div>\n                ) : historyArray.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <svg className=\"w-12 h-12 mx-auto mb-4 opacity-50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"/>\n                    </svg>\n                    <p>No workout history yet. Start logging your workouts!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {historyArray.map((workout: any, index: number) => (\n                      <Card key={workout.id} className=\"hover:shadow-md transition-all\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <div className=\"flex items-center space-x-3\">\n                                <Badge variant=\"secondary\">{workout.category || 'General'}</Badge>\n                                <span className=\"text-sm text-muted-foreground\">\n                                  {new Date(workout.createdAt).toLocaleDateString()}\n                                </span>\n                              </div>\n                              <p className=\"text-sm mt-1\">\n                                {Math.floor(workout.totalDuration / 60)}min • {workout.caloriesBurned || 0} cal\n                              </p>\n                              {workout.notes && (\n                                <p className=\"text-xs text-muted-foreground mt-1\">{workout.notes}</p>\n                              )}\n                            </div>\n                            <Badge variant={workout.status === 'completed' ? 'default' : 'outline'}>\n                              {workout.status}\n                            </Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":24289},"client/src/pages/fitness-plans.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, Clock, Target, Zap, Users, Award, ChevronRight, PlayCircle } from \"lucide-react\";\n\nexport default function FitnessPlans() {\n  const [selectedPlan, setSelectedPlan] = useState<any>(null);\n  const [selectedWorkout, setSelectedWorkout] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Fetch fitness plans\n  const { data: fitnessPlans = [], isLoading: isLoadingPlans } = useQuery({\n    queryKey: [\"/api/fitness-plans\"],\n  }) as { data: any[], isLoading: boolean };\n\n  // Generate new fitness plan\n  const generatePlanMutation = useMutation({\n    mutationFn: async (preferences: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate-fitness-plan\", { preferences });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Fitness Plan Generated!\",\n        description: `Your personalized ${data.methodology} plan is ready.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/fitness-plans\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate fitness plan. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate workout for a plan\n  const generateWorkoutMutation = useMutation({\n    mutationFn: async (preferences: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate-workout\", { preferences });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSelectedWorkout(data);\n      toast({\n        title: \"Workout Generated!\",\n        description: \"Your personalized workout is ready to view.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate workout. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGeneratePlan = (methodology: string) => {\n    generatePlanMutation.mutate({\n      planType: methodology.toLowerCase(),\n      methodology: methodology,\n      duration: 8,\n      workoutsPerWeek: 4,\n      focusArea: \"basketball performance\",\n    });\n  };\n\n  if (isLoadingPlans) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\" data-testid=\"fitness-plans-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">\n            Fitness Plans\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Structured training programs with proven methodologies\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={() => handleGeneratePlan(\"GOATA\")}\n            disabled={generatePlanMutation.isPending}\n            className=\"gradient-orange\"\n            data-testid=\"button-generate-goata\"\n          >\n            <Zap className=\"w-4 h-4 mr-2\" />\n            Generate GOATA Plan\n          </Button>\n          <Button\n            onClick={() => handleGeneratePlan(\"Soviet\")}\n            disabled={generatePlanMutation.isPending}\n            variant=\"outline\"\n            data-testid=\"button-generate-soviet\"\n          >\n            <Target className=\"w-4 h-4 mr-2\" />\n            Generate Soviet Plan\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"browse\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"browse\" data-testid=\"tab-browse\">Browse Plans</TabsTrigger>\n          <TabsTrigger value=\"methodologies\" data-testid=\"tab-methodologies\">Methodologies</TabsTrigger>\n          <TabsTrigger value=\"create\" data-testid=\"tab-create\">Create Custom</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"browse\" className=\"space-y-6\">\n          {fitnessPlans.length === 0 ? (\n            <Card className=\"glass\">\n              <CardContent className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Calendar className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">No Fitness Plans Yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Generate your first structured training plan to get started\n                </p>\n                <Button \n                  onClick={() => handleGeneratePlan(\"GOATA\")}\n                  disabled={generatePlanMutation.isPending}\n                  className=\"gradient-orange\"\n                  data-testid=\"button-generate-first-plan\"\n                >\n                  Generate Your First Plan\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {fitnessPlans.map((plan: any) => (\n                <Card \n                  key={plan.id} \n                  className=\"glass hover-elevate cursor-pointer\"\n                  onClick={() => setSelectedPlan(plan)}\n                  data-testid={`card-plan-${plan.id}`}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{plan.name}</CardTitle>\n                        <CardDescription className=\"line-clamp-2\">\n                          {plan.description}\n                        </CardDescription>\n                      </div>\n                      <Badge variant=\"secondary\" data-testid={`badge-methodology-${plan.methodology}`}>\n                        {plan.methodology}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          {plan.duration} weeks\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Target className=\"w-4 h-4\" />\n                          {plan.workoutsPerWeek}/week\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <Badge \n                          variant={plan.difficulty === 'advanced' ? 'default' : 'outline'}\n                          data-testid={`badge-difficulty-${plan.difficulty}`}\n                        >\n                          {plan.difficulty}\n                        </Badge>\n                        <Button size=\"sm\" variant=\"ghost\" data-testid=\"button-view-plan\">\n                          <ChevronRight className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"methodologies\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card className=\"glass\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5 text-orange-500\" />\n                  GOATA Method\n                </CardTitle>\n                <CardDescription>\n                  Revolutionary movement methodology focusing on spiral patterns and athletic optimization\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2 text-sm\">\n                  <p><strong>Focus:</strong> Movement quality, spiral mechanics, injury prevention</p>\n                  <p><strong>Best for:</strong> Athletes seeking movement optimization and longevity</p>\n                  <p><strong>Duration:</strong> 8-12 weeks for foundation, ongoing for mastery</p>\n                  <a \n                    href=\"https://goatamovement.com/methodology\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-orange-500 hover:text-orange-400 text-xs underline\"\n                  >\n                    Learn more about GOATA →\n                  </a>\n                </div>\n                <Button \n                  onClick={() => handleGeneratePlan(\"GOATA\")}\n                  disabled={generatePlanMutation.isPending}\n                  className=\"w-full gradient-orange\"\n                  data-testid=\"button-generate-goata-detailed\"\n                >\n                  Generate GOATA Plan\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5 text-red-500\" />\n                  Soviet Method\n                </CardTitle>\n                <CardDescription>\n                  Time-tested systematic approach to strength and conditioning development\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2 text-sm\">\n                  <p><strong>Focus:</strong> Systematic strength, periodization, work capacity</p>\n                  <p><strong>Best for:</strong> Athletes seeking structured strength development</p>\n                  <p><strong>Duration:</strong> 12-16 weeks with clear periodization phases</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Based on time-tested Eastern European training methods emphasizing systematic progression and work capacity development.\n                  </p>\n                </div>\n                <Button \n                  onClick={() => handleGeneratePlan(\"Soviet\")}\n                  disabled={generatePlanMutation.isPending}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                  data-testid=\"button-generate-soviet-detailed\"\n                >\n                  Generate Soviet Plan\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5 text-blue-500\" />\n                  NBA Method\n                </CardTitle>\n                <CardDescription>\n                  Professional basketball-specific training protocols\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2 text-sm\">\n                  <p><strong>Focus:</strong> Basketball skills, game conditioning, performance</p>\n                  <p><strong>Best for:</strong> Basketball players at all levels</p>\n                  <p><strong>Duration:</strong> Season-long with phases for different periods</p>\n                  <a \n                    href=\"https://nba.com/resources/training\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-500 hover:text-blue-400 text-xs underline\"\n                  >\n                    NBA Training Resources →\n                  </a>\n                </div>\n                <Button \n                  onClick={() => handleGeneratePlan(\"NBA\")}\n                  disabled={generatePlanMutation.isPending}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                  data-testid=\"button-generate-nba\"\n                >\n                  Generate NBA Plan\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"w-5 h-5 text-purple-500\" />\n                  Hypertrophy Method\n                </CardTitle>\n                <CardDescription>\n                  Muscle building focused training with basketball applications\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2 text-sm\">\n                  <p><strong>Focus:</strong> Muscle growth, strength endurance, size gains</p>\n                  <p><strong>Best for:</strong> Athletes looking to add functional muscle mass</p>\n                  <p><strong>Duration:</strong> 8-12 weeks with progressive overload</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Science-based muscle building approach with 8-12 rep ranges, progressive overload, and adequate recovery periods.\n                  </p>\n                </div>\n                <Button \n                  onClick={() => handleGeneratePlan(\"Hypertrophy\")}\n                  disabled={generatePlanMutation.isPending}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                  data-testid=\"button-generate-hypertrophy\"\n                >\n                  Generate Hypertrophy Plan\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"create\" className=\"space-y-6\">\n          <Card className=\"glass\">\n            <CardContent className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <PlayCircle className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Custom Plan Builder</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Advanced plan creation tools coming soon. For now, generate AI plans and customize them.\n              </p>\n              <Button variant=\"outline\" disabled data-testid=\"button-custom-builder-coming-soon\">\n                Coming Soon\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Plan Detail Dialog */}\n      <Dialog open={!!selectedPlan} onOpenChange={() => setSelectedPlan(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {selectedPlan?.name}\n              <Badge variant=\"secondary\">{selectedPlan?.methodology}</Badge>\n            </DialogTitle>\n            <DialogDescription>\n              {selectedPlan?.description}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedPlan && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{selectedPlan.duration}</div>\n                  <div className=\"text-sm text-muted-foreground\">Weeks</div>\n                </div>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{selectedPlan.workoutsPerWeek}</div>\n                  <div className=\"text-sm text-muted-foreground\">Per Week</div>\n                </div>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-2xl font-bold capitalize\">{selectedPlan.difficulty}</div>\n                  <div className=\"text-sm text-muted-foreground\">Level</div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold mb-3\">Sample Workout</h4>\n                <Button \n                  onClick={() => generateWorkoutMutation.mutate({\n                    planType: selectedPlan.methodology,\n                    focusArea: \"basketball\",\n                    intensity: selectedPlan.difficulty,\n                  })}\n                  disabled={generateWorkoutMutation.isPending}\n                  className=\"gradient-orange\"\n                  data-testid=\"button-generate-sample-workout\"\n                >\n                  {generateWorkoutMutation.isPending ? \"Generating...\" : \"Generate Sample Workout\"}\n                </Button>\n              </div>\n\n              {selectedWorkout && (\n                <Card className=\"glass\">\n                  <CardHeader>\n                    <CardTitle>{selectedWorkout.name}</CardTitle>\n                    <CardDescription>{selectedWorkout.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {selectedWorkout.phases?.map((phase: any, index: number) => (\n                      <div key={index} className=\"mb-4\">\n                        <h5 className=\"font-medium mb-2\">{phase.name}</h5>\n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\n                          {phase.exercises?.map((exercise: any, i: number) => (\n                            <div key={i} className=\"flex justify-between\">\n                              <span>{exercise.name}</span>\n                              <span>{exercise.sets}x{exercise.reps}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18740}},"version":1}